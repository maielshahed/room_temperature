
room_temperature.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000f82  00001016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  0000102e  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00002b68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e03  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046b  00000000  00000000  00003a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c5  00000000  00000000  00003ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  0000479c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002db  00000000  00000000  00004980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000824  00000000  00000000  00004c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 82 04 	call	0x904	; 0x904 <main>
  8a:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vinit>:

#include "Std_macros.h"

void ADC_vinit(void)
{
	SET_BIT(ADMUX,REFS0); //configure VREF AVCC 5v
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1); //configure VREF AVCC 2.65v  steb 2.5   
  94:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN); // enable ADC
  96:	37 9a       	sbi	0x06, 7	; 6
	/* adjust ADC clock 8mhz clock cpu / 64 = 125khz clock adc*/
	SET_BIT(ADCSRA,ADPS2);
  98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  9a:	31 9a       	sbi	0x06, 1	; 6
}
  9c:	08 95       	ret

0000009e <ADC_Read>:

unsigned short ADC_Read(void)
{
	unsigned short read_val;

	SET_BIT(ADCSRA,ADSC);//start conv
  9e:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADSC)==1);
  a0:	36 99       	sbic	0x06, 6	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_Read+0x2>
	   SET_BIT(ADCSRA,ADIF); // clear ADIF*/
	//while(!(READ_BIT(ADCSRA,ADIF)==1));//stay in your position till ADIF become 1
	/*while((READ_BIT(ADCSRA,ADIF)==0));//stay in your position till ADIF become 1
	   SET_BIT(ADCSRA,ADIF); // clear ADIF*/
	
	read_val=(ADCL);
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
  a8:	45 b1       	in	r20, 0x05	; 5
  aa:	34 2f       	mov	r19, r20
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	82 2b       	or	r24, r18
  b0:	93 2b       	or	r25, r19
	return read_val ;
}
  b2:	08 95       	ret

000000b4 <DIO_vsetpindir>:
#include "Std_macros.h"

void DIO_vsetpindir(unsigned char port,unsigned char pin,unsigned char direction){
	
	
	switch(port){
  b4:	84 34       	cpi	r24, 0x44	; 68
  b6:	09 f4       	brne	.+2      	; 0xba <DIO_vsetpindir+0x6>
  b8:	54 c0       	rjmp	.+168    	; 0x162 <DIO_vsetpindir+0xae>
  ba:	85 34       	cpi	r24, 0x45	; 69
  bc:	48 f4       	brcc	.+18     	; 0xd0 <DIO_vsetpindir+0x1c>
  be:	82 34       	cpi	r24, 0x42	; 66
  c0:	99 f1       	breq	.+102    	; 0x128 <DIO_vsetpindir+0x74>
  c2:	83 34       	cpi	r24, 0x43	; 67
  c4:	08 f0       	brcs	.+2      	; 0xc8 <DIO_vsetpindir+0x14>
  c6:	6a c0       	rjmp	.+212    	; 0x19c <DIO_vsetpindir+0xe8>
  c8:	81 34       	cpi	r24, 0x41	; 65
  ca:	09 f0       	breq	.+2      	; 0xce <DIO_vsetpindir+0x1a>
  cc:	83 c0       	rjmp	.+262    	; 0x1d4 <DIO_vsetpindir+0x120>
  ce:	0f c0       	rjmp	.+30     	; 0xee <DIO_vsetpindir+0x3a>
  d0:	82 36       	cpi	r24, 0x62	; 98
  d2:	51 f1       	breq	.+84     	; 0x128 <DIO_vsetpindir+0x74>
  d4:	83 36       	cpi	r24, 0x63	; 99
  d6:	20 f4       	brcc	.+8      	; 0xe0 <DIO_vsetpindir+0x2c>
  d8:	81 36       	cpi	r24, 0x61	; 97
  da:	09 f0       	breq	.+2      	; 0xde <DIO_vsetpindir+0x2a>
  dc:	7b c0       	rjmp	.+246    	; 0x1d4 <DIO_vsetpindir+0x120>
  de:	07 c0       	rjmp	.+14     	; 0xee <DIO_vsetpindir+0x3a>
  e0:	83 36       	cpi	r24, 0x63	; 99
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_vsetpindir+0x32>
  e4:	5b c0       	rjmp	.+182    	; 0x19c <DIO_vsetpindir+0xe8>
  e6:	84 36       	cpi	r24, 0x64	; 100
  e8:	09 f0       	breq	.+2      	; 0xec <DIO_vsetpindir+0x38>
  ea:	74 c0       	rjmp	.+232    	; 0x1d4 <DIO_vsetpindir+0x120>
  ec:	3a c0       	rjmp	.+116    	; 0x162 <DIO_vsetpindir+0xae>
		
		case 'A':
		case 'a':
		if (direction==1)
  ee:	41 30       	cpi	r20, 0x01	; 1
  f0:	69 f4       	brne	.+26     	; 0x10c <DIO_vsetpindir+0x58>
		{
			SET_BIT(DDRA,pin);//Set the direction of the given pin in port A as output
  f2:	2a b3       	in	r18, 0x1a	; 26
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	ac 01       	movw	r20, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vsetpindir+0x4c>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vsetpindir+0x48>
 104:	ba 01       	movw	r22, r20
 106:	62 2b       	or	r22, r18
 108:	6a bb       	out	0x1a, r22	; 26
 10a:	08 95       	ret
			//DDRA |=(1<<pin);

		} 
		else
		{
			CLR_BIT(DDRA,pin);//CLEAR the direction of the given pin in port A as input
 10c:	2a b3       	in	r18, 0x1a	; 26
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	ac 01       	movw	r20, r24
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_vsetpindir+0x66>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_vsetpindir+0x62>
 11e:	ba 01       	movw	r22, r20
 120:	60 95       	com	r22
 122:	62 23       	and	r22, r18
 124:	6a bb       	out	0x1a, r22	; 26
 126:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (direction==1)
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	69 f4       	brne	.+26     	; 0x146 <DIO_vsetpindir+0x92>
		{
			SET_BIT(DDRB,pin);//Set the direction of the given pin in port B as output
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetpindir+0x86>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetpindir+0x82>
 13e:	ba 01       	movw	r22, r20
 140:	62 2b       	or	r22, r18
 142:	67 bb       	out	0x17, r22	; 23
 144:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRB,pin);//CLEAR the direction of the given pin in port B as input
 146:	27 b3       	in	r18, 0x17	; 23
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	ac 01       	movw	r20, r24
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_vsetpindir+0xa0>
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_vsetpindir+0x9c>
 158:	ba 01       	movw	r22, r20
 15a:	60 95       	com	r22
 15c:	62 23       	and	r22, r18
 15e:	67 bb       	out	0x17, r22	; 23
 160:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (direction==1)
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	69 f4       	brne	.+26     	; 0x180 <DIO_vsetpindir+0xcc>
		{
			SET_BIT(DDRD,pin);//Set the direction of the given pin in port D as output
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	ac 01       	movw	r20, r24
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_vsetpindir+0xc0>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_vsetpindir+0xbc>
 178:	ba 01       	movw	r22, r20
 17a:	62 2b       	or	r22, r18
 17c:	61 bb       	out	0x11, r22	; 17
 17e:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRD,pin);//CLEAR the direction of the given pin in port D as input
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	ac 01       	movw	r20, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_vsetpindir+0xda>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_vsetpindir+0xd6>
 192:	ba 01       	movw	r22, r20
 194:	60 95       	com	r22
 196:	62 23       	and	r22, r18
 198:	61 bb       	out	0x11, r22	; 17
 19a:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (direction==1)
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	69 f4       	brne	.+26     	; 0x1ba <DIO_vsetpindir+0x106>
		{
			SET_BIT(DDRC,pin);//Set the direction of the given pin in port C as output
 1a0:	24 b3       	in	r18, 0x14	; 20
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	ac 01       	movw	r20, r24
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vsetpindir+0xfa>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vsetpindir+0xf6>
 1b2:	ba 01       	movw	r22, r20
 1b4:	62 2b       	or	r22, r18
 1b6:	64 bb       	out	0x14, r22	; 20
 1b8:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRC,pin);//CLEAR the direction of the given pin in port C as input
 1ba:	24 b3       	in	r18, 0x14	; 20
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_vsetpindir+0x114>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_vsetpindir+0x110>
 1cc:	ba 01       	movw	r22, r20
 1ce:	60 95       	com	r22
 1d0:	62 23       	and	r22, r18
 1d2:	64 bb       	out	0x14, r22	; 20
 1d4:	08 95       	ret

000001d6 <DIO_vwrite>:
}
//port direction==output
void DIO_vwrite(unsigned char port,unsigned char pin,unsigned char val){
	
	
	switch(port){
 1d6:	84 34       	cpi	r24, 0x44	; 68
 1d8:	09 f4       	brne	.+2      	; 0x1dc <DIO_vwrite+0x6>
 1da:	54 c0       	rjmp	.+168    	; 0x284 <DIO_vwrite+0xae>
 1dc:	85 34       	cpi	r24, 0x45	; 69
 1de:	48 f4       	brcc	.+18     	; 0x1f2 <DIO_vwrite+0x1c>
 1e0:	82 34       	cpi	r24, 0x42	; 66
 1e2:	99 f1       	breq	.+102    	; 0x24a <DIO_vwrite+0x74>
 1e4:	83 34       	cpi	r24, 0x43	; 67
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <DIO_vwrite+0x14>
 1e8:	6a c0       	rjmp	.+212    	; 0x2be <DIO_vwrite+0xe8>
 1ea:	81 34       	cpi	r24, 0x41	; 65
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <DIO_vwrite+0x1a>
 1ee:	83 c0       	rjmp	.+262    	; 0x2f6 <DIO_vwrite+0x120>
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <DIO_vwrite+0x3a>
 1f2:	82 36       	cpi	r24, 0x62	; 98
 1f4:	51 f1       	breq	.+84     	; 0x24a <DIO_vwrite+0x74>
 1f6:	83 36       	cpi	r24, 0x63	; 99
 1f8:	20 f4       	brcc	.+8      	; 0x202 <DIO_vwrite+0x2c>
 1fa:	81 36       	cpi	r24, 0x61	; 97
 1fc:	09 f0       	breq	.+2      	; 0x200 <DIO_vwrite+0x2a>
 1fe:	7b c0       	rjmp	.+246    	; 0x2f6 <DIO_vwrite+0x120>
 200:	07 c0       	rjmp	.+14     	; 0x210 <DIO_vwrite+0x3a>
 202:	83 36       	cpi	r24, 0x63	; 99
 204:	09 f4       	brne	.+2      	; 0x208 <DIO_vwrite+0x32>
 206:	5b c0       	rjmp	.+182    	; 0x2be <DIO_vwrite+0xe8>
 208:	84 36       	cpi	r24, 0x64	; 100
 20a:	09 f0       	breq	.+2      	; 0x20e <DIO_vwrite+0x38>
 20c:	74 c0       	rjmp	.+232    	; 0x2f6 <DIO_vwrite+0x120>
 20e:	3a c0       	rjmp	.+116    	; 0x284 <DIO_vwrite+0xae>
		
		case 'A':
		case 'a':
		if (val==1)
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	69 f4       	brne	.+26     	; 0x22e <DIO_vwrite+0x58>
		{
			SET_BIT(PORTA,pin);//Set the value of the given pin in port A as High
 214:	2b b3       	in	r18, 0x1b	; 27
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	ac 01       	movw	r20, r24
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_vwrite+0x4c>
 21e:	44 0f       	add	r20, r20
 220:	55 1f       	adc	r21, r21
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_vwrite+0x48>
 226:	ba 01       	movw	r22, r20
 228:	62 2b       	or	r22, r18
 22a:	6b bb       	out	0x1b, r22	; 27
 22c:	08 95       	ret
			//PORTA |=(1<<pin);

		}
		else
		{
			CLR_BIT(PORTA,pin);//Set the value of the given pin in port A as LOW
 22e:	2b b3       	in	r18, 0x1b	; 27
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_vwrite+0x66>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_vwrite+0x62>
 240:	ba 01       	movw	r22, r20
 242:	60 95       	com	r22
 244:	62 23       	and	r22, r18
 246:	6b bb       	out	0x1b, r22	; 27
 248:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (val==1)
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	69 f4       	brne	.+26     	; 0x268 <DIO_vwrite+0x92>
		{
			SET_BIT(PORTB,pin);//Set the value of the given pin in port B as High
 24e:	28 b3       	in	r18, 0x18	; 24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	ac 01       	movw	r20, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vwrite+0x86>
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vwrite+0x82>
 260:	ba 01       	movw	r22, r20
 262:	62 2b       	or	r22, r18
 264:	68 bb       	out	0x18, r22	; 24
 266:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);//Set the value of the given pin in port B as LOW
 268:	28 b3       	in	r18, 0x18	; 24
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_vwrite+0xa0>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_vwrite+0x9c>
 27a:	ba 01       	movw	r22, r20
 27c:	60 95       	com	r22
 27e:	62 23       	and	r22, r18
 280:	68 bb       	out	0x18, r22	; 24
 282:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (val==1)
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	69 f4       	brne	.+26     	; 0x2a2 <DIO_vwrite+0xcc>
		{
			SET_BIT(PORTD,pin);//Set the value of the given pin in port D as High
 288:	22 b3       	in	r18, 0x12	; 18
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	ac 01       	movw	r20, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_vwrite+0xc0>
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_vwrite+0xbc>
 29a:	ba 01       	movw	r22, r20
 29c:	62 2b       	or	r22, r18
 29e:	62 bb       	out	0x12, r22	; 18
 2a0:	08 95       	ret


		}
		else
		{
			CLR_BIT(PORTD,pin);//Set the value of the given pin in port D as LOW
 2a2:	22 b3       	in	r18, 0x12	; 18
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	ac 01       	movw	r20, r24
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vwrite+0xda>
 2ac:	44 0f       	add	r20, r20
 2ae:	55 1f       	adc	r21, r21
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vwrite+0xd6>
 2b4:	ba 01       	movw	r22, r20
 2b6:	60 95       	com	r22
 2b8:	62 23       	and	r22, r18
 2ba:	62 bb       	out	0x12, r22	; 18
 2bc:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (val==1)
 2be:	41 30       	cpi	r20, 0x01	; 1
 2c0:	69 f4       	brne	.+26     	; 0x2dc <DIO_vwrite+0x106>
		{
			SET_BIT(PORTC,pin);//Set the value of the given pin in port C as High
 2c2:	25 b3       	in	r18, 0x15	; 21
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	ac 01       	movw	r20, r24
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_vwrite+0xfa>
 2cc:	44 0f       	add	r20, r20
 2ce:	55 1f       	adc	r21, r21
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_vwrite+0xf6>
 2d4:	ba 01       	movw	r22, r20
 2d6:	62 2b       	or	r22, r18
 2d8:	65 bb       	out	0x15, r22	; 21
 2da:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);//Set the value of the given pin in port C as LOW
 2dc:	25 b3       	in	r18, 0x15	; 21
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	ac 01       	movw	r20, r24
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_vwrite+0x114>
 2e6:	44 0f       	add	r20, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_vwrite+0x110>
 2ee:	ba 01       	movw	r22, r20
 2f0:	60 95       	com	r22
 2f2:	62 23       	and	r22, r18
 2f4:	65 bb       	out	0x15, r22	; 21
 2f6:	08 95       	ret

000002f8 <DIO_vtogglepin>:
		
	}
}

void DIO_vtogglepin(unsigned char port,unsigned char pin){
	switch(port){
 2f8:	84 34       	cpi	r24, 0x44	; 68
 2fa:	81 f1       	breq	.+96     	; 0x35c <DIO_vtogglepin+0x64>
 2fc:	85 34       	cpi	r24, 0x45	; 69
 2fe:	40 f4       	brcc	.+16     	; 0x310 <DIO_vtogglepin+0x18>
 300:	82 34       	cpi	r24, 0x42	; 66
 302:	f9 f0       	breq	.+62     	; 0x342 <DIO_vtogglepin+0x4a>
 304:	83 34       	cpi	r24, 0x43	; 67
 306:	b8 f5       	brcc	.+110    	; 0x376 <DIO_vtogglepin+0x7e>
 308:	81 34       	cpi	r24, 0x41	; 65
 30a:	09 f0       	breq	.+2      	; 0x30e <DIO_vtogglepin+0x16>
 30c:	40 c0       	rjmp	.+128    	; 0x38e <DIO_vtogglepin+0x96>
 30e:	0c c0       	rjmp	.+24     	; 0x328 <DIO_vtogglepin+0x30>
 310:	82 36       	cpi	r24, 0x62	; 98
 312:	b9 f0       	breq	.+46     	; 0x342 <DIO_vtogglepin+0x4a>
 314:	83 36       	cpi	r24, 0x63	; 99
 316:	18 f4       	brcc	.+6      	; 0x31e <DIO_vtogglepin+0x26>
 318:	81 36       	cpi	r24, 0x61	; 97
 31a:	c9 f5       	brne	.+114    	; 0x38e <DIO_vtogglepin+0x96>
 31c:	05 c0       	rjmp	.+10     	; 0x328 <DIO_vtogglepin+0x30>
 31e:	83 36       	cpi	r24, 0x63	; 99
 320:	51 f1       	breq	.+84     	; 0x376 <DIO_vtogglepin+0x7e>
 322:	84 36       	cpi	r24, 0x64	; 100
 324:	a1 f5       	brne	.+104    	; 0x38e <DIO_vtogglepin+0x96>
 326:	1a c0       	rjmp	.+52     	; 0x35c <DIO_vtogglepin+0x64>
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin);//Toggle the value of the given pin in port A
 328:	2b b3       	in	r18, 0x1b	; 27
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	ac 01       	movw	r20, r24
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_vtogglepin+0x3e>
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_vtogglepin+0x3a>
 33a:	ba 01       	movw	r22, r20
 33c:	62 27       	eor	r22, r18
 33e:	6b bb       	out	0x1b, r22	; 27
		break;
 340:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin);//Toggle the value of the given pin in port B
 342:	28 b3       	in	r18, 0x18	; 24
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	ac 01       	movw	r20, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_vtogglepin+0x58>
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_vtogglepin+0x54>
 354:	ba 01       	movw	r22, r20
 356:	62 27       	eor	r22, r18
 358:	68 bb       	out	0x18, r22	; 24
		break;
 35a:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin);//Toggle the value of the given pin in port D
 35c:	22 b3       	in	r18, 0x12	; 18
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	ac 01       	movw	r20, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_vtogglepin+0x72>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_vtogglepin+0x6e>
 36e:	ba 01       	movw	r22, r20
 370:	62 27       	eor	r22, r18
 372:	62 bb       	out	0x12, r22	; 18
		break;
 374:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin);//Toggle the value of the given pin in port C
 376:	25 b3       	in	r18, 0x15	; 21
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	ac 01       	movw	r20, r24
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_vtogglepin+0x8c>
 380:	44 0f       	add	r20, r20
 382:	55 1f       	adc	r21, r21
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_vtogglepin+0x88>
 388:	ba 01       	movw	r22, r20
 38a:	62 27       	eor	r22, r18
 38c:	65 bb       	out	0x15, r22	; 21
 38e:	08 95       	ret

00000390 <DIO_uread>:
		default:break;
	}
}
unsigned char DIO_uread(unsigned char port ,unsigned char pin){
	unsigned char return_value;
	switch(port){
 390:	84 34       	cpi	r24, 0x44	; 68
 392:	09 f4       	brne	.+2      	; 0x396 <DIO_uread+0x6>
 394:	51 c0       	rjmp	.+162    	; 0x438 <DIO_uread+0xa8>
 396:	85 34       	cpi	r24, 0x45	; 69
 398:	40 f4       	brcc	.+16     	; 0x3aa <DIO_uread+0x1a>
 39a:	82 34       	cpi	r24, 0x42	; 66
 39c:	39 f1       	breq	.+78     	; 0x3ec <DIO_uread+0x5c>
 39e:	83 34       	cpi	r24, 0x43	; 67
 3a0:	c0 f5       	brcc	.+112    	; 0x412 <DIO_uread+0x82>
 3a2:	81 34       	cpi	r24, 0x41	; 65
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <DIO_uread+0x18>
 3a6:	5a c0       	rjmp	.+180    	; 0x45c <DIO_uread+0xcc>
 3a8:	0e c0       	rjmp	.+28     	; 0x3c6 <DIO_uread+0x36>
 3aa:	82 36       	cpi	r24, 0x62	; 98
 3ac:	f9 f0       	breq	.+62     	; 0x3ec <DIO_uread+0x5c>
 3ae:	83 36       	cpi	r24, 0x63	; 99
 3b0:	20 f4       	brcc	.+8      	; 0x3ba <DIO_uread+0x2a>
 3b2:	81 36       	cpi	r24, 0x61	; 97
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <DIO_uread+0x28>
 3b6:	52 c0       	rjmp	.+164    	; 0x45c <DIO_uread+0xcc>
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <DIO_uread+0x36>
 3ba:	83 36       	cpi	r24, 0x63	; 99
 3bc:	51 f1       	breq	.+84     	; 0x412 <DIO_uread+0x82>
 3be:	84 36       	cpi	r24, 0x64	; 100
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <DIO_uread+0x34>
 3c2:	4c c0       	rjmp	.+152    	; 0x45c <DIO_uread+0xcc>
 3c4:	39 c0       	rjmp	.+114    	; 0x438 <DIO_uread+0xa8>
		
		case 'A':
		case 'a':
		return_value=READ_BIT(PINA,pin);//Read the value from the given pin in port A
 3c6:	29 b3       	in	r18, 0x19	; 25
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	06 2e       	mov	r0, r22
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_uread+0x44>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_uread+0x40>
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	82 23       	and	r24, r18
 3dc:	93 23       	and	r25, r19
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_uread+0x54>
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_uread+0x50>
 3e8:	98 2f       	mov	r25, r24
		break;
 3ea:	38 c0       	rjmp	.+112    	; 0x45c <DIO_uread+0xcc>


	case 'B':
	case 'b':
	return_value=READ_BIT(PINB,pin);//Read the value from the given pin in port B
 3ec:	26 b3       	in	r18, 0x16	; 22
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	06 2e       	mov	r0, r22
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_uread+0x6a>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_uread+0x66>
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	82 23       	and	r24, r18
 402:	93 23       	and	r25, r19
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_uread+0x7a>
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_uread+0x76>
 40e:	98 2f       	mov	r25, r24
	break;
 410:	25 c0       	rjmp	.+74     	; 0x45c <DIO_uread+0xcc>
		
			case 'C':
			case 'c':
			return_value=READ_BIT(PINC,pin);//Read the value from the given pin in port C
 412:	23 b3       	in	r18, 0x13	; 19
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	06 2e       	mov	r0, r22
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_uread+0x90>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_uread+0x8c>
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	82 23       	and	r24, r18
 428:	93 23       	and	r25, r19
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_uread+0xa0>
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_uread+0x9c>
 434:	98 2f       	mov	r25, r24
			break;
 436:	12 c0       	rjmp	.+36     	; 0x45c <DIO_uread+0xcc>
			
				case 'D':
				case 'd':
				return_value=READ_BIT(PIND,pin);//Read the value from the given pin in port D
 438:	20 b3       	in	r18, 0x10	; 16
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	06 2e       	mov	r0, r22
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_uread+0xb6>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_uread+0xb2>
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	82 23       	and	r24, r18
 44e:	93 23       	and	r25, r19
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_uread+0xc6>
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_uread+0xc2>
 45a:	98 2f       	mov	r25, r24
				break;
		default:break;
		
	}
	return return_value;
}
 45c:	89 2f       	mov	r24, r25
 45e:	08 95       	ret

00000460 <DIO_vsetportdir>:
//direction port


void DIO_vsetportdir(unsigned char port,unsigned char direction){
	
	switch(port){
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	c9 f0       	breq	.+50     	; 0x496 <DIO_vsetportdir+0x36>
 464:	85 34       	cpi	r24, 0x45	; 69
 466:	38 f4       	brcc	.+14     	; 0x476 <DIO_vsetportdir+0x16>
 468:	82 34       	cpi	r24, 0x42	; 66
 46a:	99 f0       	breq	.+38     	; 0x492 <DIO_vsetportdir+0x32>
 46c:	83 34       	cpi	r24, 0x43	; 67
 46e:	a8 f4       	brcc	.+42     	; 0x49a <DIO_vsetportdir+0x3a>
 470:	81 34       	cpi	r24, 0x41	; 65
 472:	a1 f4       	brne	.+40     	; 0x49c <DIO_vsetportdir+0x3c>
 474:	0c c0       	rjmp	.+24     	; 0x48e <DIO_vsetportdir+0x2e>
 476:	82 36       	cpi	r24, 0x62	; 98
 478:	61 f0       	breq	.+24     	; 0x492 <DIO_vsetportdir+0x32>
 47a:	83 36       	cpi	r24, 0x63	; 99
 47c:	18 f4       	brcc	.+6      	; 0x484 <DIO_vsetportdir+0x24>
 47e:	81 36       	cpi	r24, 0x61	; 97
 480:	69 f4       	brne	.+26     	; 0x49c <DIO_vsetportdir+0x3c>
 482:	05 c0       	rjmp	.+10     	; 0x48e <DIO_vsetportdir+0x2e>
 484:	83 36       	cpi	r24, 0x63	; 99
 486:	49 f0       	breq	.+18     	; 0x49a <DIO_vsetportdir+0x3a>
 488:	84 36       	cpi	r24, 0x64	; 100
 48a:	41 f4       	brne	.+16     	; 0x49c <DIO_vsetportdir+0x3c>
 48c:	04 c0       	rjmp	.+8      	; 0x496 <DIO_vsetportdir+0x36>
		
		case 'A':
		case 'a':
		DDRA=direction;//set the direction of port A
 48e:	6a bb       	out	0x1a, r22	; 26

		break;
 490:	08 95       	ret
		
		case 'B':
		case 'b':	
			DDRB=direction;
 492:	67 bb       	out	0x17, r22	; 23

		break;
 494:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=direction;
 496:	61 bb       	out	0x11, r22	; 17
		
		
		break;
 498:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=direction;
 49a:	64 bb       	out	0x14, r22	; 20
 49c:	08 95       	ret

0000049e <DIO_vWRITEport>:



void DIO_vWRITEport(unsigned char port,unsigned char val){
	
	switch(port){
 49e:	84 34       	cpi	r24, 0x44	; 68
 4a0:	c9 f0       	breq	.+50     	; 0x4d4 <DIO_vWRITEport+0x36>
 4a2:	85 34       	cpi	r24, 0x45	; 69
 4a4:	38 f4       	brcc	.+14     	; 0x4b4 <DIO_vWRITEport+0x16>
 4a6:	82 34       	cpi	r24, 0x42	; 66
 4a8:	99 f0       	breq	.+38     	; 0x4d0 <DIO_vWRITEport+0x32>
 4aa:	83 34       	cpi	r24, 0x43	; 67
 4ac:	a8 f4       	brcc	.+42     	; 0x4d8 <DIO_vWRITEport+0x3a>
 4ae:	81 34       	cpi	r24, 0x41	; 65
 4b0:	a1 f4       	brne	.+40     	; 0x4da <DIO_vWRITEport+0x3c>
 4b2:	0c c0       	rjmp	.+24     	; 0x4cc <DIO_vWRITEport+0x2e>
 4b4:	82 36       	cpi	r24, 0x62	; 98
 4b6:	61 f0       	breq	.+24     	; 0x4d0 <DIO_vWRITEport+0x32>
 4b8:	83 36       	cpi	r24, 0x63	; 99
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <DIO_vWRITEport+0x24>
 4bc:	81 36       	cpi	r24, 0x61	; 97
 4be:	69 f4       	brne	.+26     	; 0x4da <DIO_vWRITEport+0x3c>
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <DIO_vWRITEport+0x2e>
 4c2:	83 36       	cpi	r24, 0x63	; 99
 4c4:	49 f0       	breq	.+18     	; 0x4d8 <DIO_vWRITEport+0x3a>
 4c6:	84 36       	cpi	r24, 0x64	; 100
 4c8:	41 f4       	brne	.+16     	; 0x4da <DIO_vWRITEport+0x3c>
 4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <DIO_vWRITEport+0x36>
		
		case 'A':
		case 'a':
		PORTA=val;//Write the given value to the port A
 4cc:	6b bb       	out	0x1b, r22	; 27

		break;
 4ce:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=val;//Write the given value to the port B
 4d0:	68 bb       	out	0x18, r22	; 24
	

		break;
 4d2:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=val;//Write the given value to the port D
 4d4:	62 bb       	out	0x12, r22	; 18
		
		break;
 4d6:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=val;//Write the given value to the port C
 4d8:	65 bb       	out	0x15, r22	; 21
 4da:	08 95       	ret

000004dc <DIO_ureadport>:
	}
	
	
	unsigned char DIO_ureadport(unsigned char port){
		unsigned char return_val;
		switch(port){
 4dc:	84 34       	cpi	r24, 0x44	; 68
 4de:	d1 f0       	breq	.+52     	; 0x514 <DIO_ureadport+0x38>
 4e0:	85 34       	cpi	r24, 0x45	; 69
 4e2:	38 f4       	brcc	.+14     	; 0x4f2 <DIO_ureadport+0x16>
 4e4:	82 34       	cpi	r24, 0x42	; 66
 4e6:	99 f0       	breq	.+38     	; 0x50e <DIO_ureadport+0x32>
 4e8:	83 34       	cpi	r24, 0x43	; 67
 4ea:	b8 f4       	brcc	.+46     	; 0x51a <DIO_ureadport+0x3e>
 4ec:	81 34       	cpi	r24, 0x41	; 65
 4ee:	b9 f4       	brne	.+46     	; 0x51e <DIO_ureadport+0x42>
 4f0:	0c c0       	rjmp	.+24     	; 0x50a <DIO_ureadport+0x2e>
 4f2:	82 36       	cpi	r24, 0x62	; 98
 4f4:	61 f0       	breq	.+24     	; 0x50e <DIO_ureadport+0x32>
 4f6:	83 36       	cpi	r24, 0x63	; 99
 4f8:	18 f4       	brcc	.+6      	; 0x500 <DIO_ureadport+0x24>
 4fa:	81 36       	cpi	r24, 0x61	; 97
 4fc:	81 f4       	brne	.+32     	; 0x51e <DIO_ureadport+0x42>
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <DIO_ureadport+0x2e>
 500:	83 36       	cpi	r24, 0x63	; 99
 502:	59 f0       	breq	.+22     	; 0x51a <DIO_ureadport+0x3e>
 504:	84 36       	cpi	r24, 0x64	; 100
 506:	59 f4       	brne	.+22     	; 0x51e <DIO_ureadport+0x42>
 508:	05 c0       	rjmp	.+10     	; 0x514 <DIO_ureadport+0x38>
			
			case 'A':
			case 'a':
			return_val=PINA;//read the value to the port A
 50a:	99 b3       	in	r25, 0x19	; 25

			break;
 50c:	08 c0       	rjmp	.+16     	; 0x51e <DIO_ureadport+0x42>
			
			case 'B':
			case 'b':
			PORTB=PINB;//READ value to the port B
 50e:	86 b3       	in	r24, 0x16	; 22
 510:	88 bb       	out	0x18, r24	; 24
			

			break;
 512:	05 c0       	rjmp	.+10     	; 0x51e <DIO_ureadport+0x42>
			
			case 'D':
			case 'd':
			PORTD=PIND;//READ  value to the port D
 514:	80 b3       	in	r24, 0x10	; 16
 516:	82 bb       	out	0x12, r24	; 18
			
			break;
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_ureadport+0x42>
			
			case 'C':
			case 'c':
			PORTC=PINC;//READ  value to the port C
 51a:	83 b3       	in	r24, 0x13	; 19
 51c:	85 bb       	out	0x15, r24	; 21
			break;
			default:break;
		}			
			return return_val;

		}
 51e:	89 2f       	mov	r24, r25
 520:	08 95       	ret

00000522 <DIO_vtoggleport>:
		
		
void DIO_vtoggleport(unsigned char port){
			
			switch(port){
 522:	84 34       	cpi	r24, 0x44	; 68
 524:	e9 f0       	breq	.+58     	; 0x560 <DIO_vtoggleport+0x3e>
 526:	85 34       	cpi	r24, 0x45	; 69
 528:	38 f4       	brcc	.+14     	; 0x538 <DIO_vtoggleport+0x16>
 52a:	82 34       	cpi	r24, 0x42	; 66
 52c:	a9 f0       	breq	.+42     	; 0x558 <DIO_vtoggleport+0x36>
 52e:	83 34       	cpi	r24, 0x43	; 67
 530:	d8 f4       	brcc	.+54     	; 0x568 <DIO_vtoggleport+0x46>
 532:	81 34       	cpi	r24, 0x41	; 65
 534:	e1 f4       	brne	.+56     	; 0x56e <DIO_vtoggleport+0x4c>
 536:	0c c0       	rjmp	.+24     	; 0x550 <DIO_vtoggleport+0x2e>
 538:	82 36       	cpi	r24, 0x62	; 98
 53a:	71 f0       	breq	.+28     	; 0x558 <DIO_vtoggleport+0x36>
 53c:	83 36       	cpi	r24, 0x63	; 99
 53e:	18 f4       	brcc	.+6      	; 0x546 <DIO_vtoggleport+0x24>
 540:	81 36       	cpi	r24, 0x61	; 97
 542:	a9 f4       	brne	.+42     	; 0x56e <DIO_vtoggleport+0x4c>
 544:	05 c0       	rjmp	.+10     	; 0x550 <DIO_vtoggleport+0x2e>
 546:	83 36       	cpi	r24, 0x63	; 99
 548:	79 f0       	breq	.+30     	; 0x568 <DIO_vtoggleport+0x46>
 54a:	84 36       	cpi	r24, 0x64	; 100
 54c:	81 f4       	brne	.+32     	; 0x56e <DIO_vtoggleport+0x4c>
 54e:	08 c0       	rjmp	.+16     	; 0x560 <DIO_vtoggleport+0x3e>
				
				case 'A':
				case 'a':
				PORTA=~PORTA;    // or PORTA=PORTA^0xff
 550:	8b b3       	in	r24, 0x1b	; 27
 552:	80 95       	com	r24
 554:	8b bb       	out	0x1b, r24	; 27
				break;
 556:	08 95       	ret
				
				case 'B':
				case 'b':
				PORTB=~PORTB;//Write the given value to the port B
 558:	88 b3       	in	r24, 0x18	; 24
 55a:	80 95       	com	r24
 55c:	88 bb       	out	0x18, r24	; 24
				

				break;
 55e:	08 95       	ret
				
				case 'D':
				case 'd':
				PORTD=~PORTD;
 560:	82 b3       	in	r24, 0x12	; 18
 562:	80 95       	com	r24
 564:	82 bb       	out	0x12, r24	; 18
				
				break;
 566:	08 95       	ret
				
				case 'C':
				case 'c':
				PORTC=~PORTC;
 568:	85 b3       	in	r24, 0x15	; 21
 56a:	80 95       	com	r24
 56c:	85 bb       	out	0x15, r24	; 21
 56e:	08 95       	ret

00000570 <DIO_vconnectpullup>:
or

 */
void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 570:	82 34       	cpi	r24, 0x42	; 66
 572:	51 f1       	breq	.+84     	; 0x5c8 <DIO_vconnectpullup+0x58>
 574:	83 34       	cpi	r24, 0x43	; 67
 576:	20 f4       	brcc	.+8      	; 0x580 <DIO_vconnectpullup+0x10>
 578:	81 34       	cpi	r24, 0x41	; 65
 57a:	09 f0       	breq	.+2      	; 0x57e <DIO_vconnectpullup+0xe>
 57c:	7b c0       	rjmp	.+246    	; 0x674 <DIO_vconnectpullup+0x104>
 57e:	07 c0       	rjmp	.+14     	; 0x58e <DIO_vconnectpullup+0x1e>
 580:	83 34       	cpi	r24, 0x43	; 67
 582:	09 f4       	brne	.+2      	; 0x586 <DIO_vconnectpullup+0x16>
 584:	3e c0       	rjmp	.+124    	; 0x602 <DIO_vconnectpullup+0x92>
 586:	84 34       	cpi	r24, 0x44	; 68
 588:	09 f0       	breq	.+2      	; 0x58c <DIO_vconnectpullup+0x1c>
 58a:	74 c0       	rjmp	.+232    	; 0x674 <DIO_vconnectpullup+0x104>
 58c:	57 c0       	rjmp	.+174    	; 0x63c <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 58e:	41 30       	cpi	r20, 0x01	; 1
 590:	69 f4       	brne	.+26     	; 0x5ac <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 592:	2b b3       	in	r18, 0x1b	; 27
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	ac 01       	movw	r20, r24
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_vconnectpullup+0x30>
 59c:	44 0f       	add	r20, r20
 59e:	55 1f       	adc	r21, r21
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_vconnectpullup+0x2c>
 5a4:	ba 01       	movw	r22, r20
 5a6:	62 2b       	or	r22, r18
 5a8:	6b bb       	out	0x1b, r22	; 27
 5aa:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 5ac:	2b b3       	in	r18, 0x1b	; 27
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	ac 01       	movw	r20, r24
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_vconnectpullup+0x4a>
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_vconnectpullup+0x46>
 5be:	ba 01       	movw	r22, r20
 5c0:	60 95       	com	r22
 5c2:	62 23       	and	r22, r18
 5c4:	6b bb       	out	0x1b, r22	; 27
 5c6:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 5c8:	41 30       	cpi	r20, 0x01	; 1
 5ca:	69 f4       	brne	.+26     	; 0x5e6 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 5cc:	28 b3       	in	r18, 0x18	; 24
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	ac 01       	movw	r20, r24
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_vconnectpullup+0x6a>
 5d6:	44 0f       	add	r20, r20
 5d8:	55 1f       	adc	r21, r21
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_vconnectpullup+0x66>
 5de:	ba 01       	movw	r22, r20
 5e0:	62 2b       	or	r22, r18
 5e2:	68 bb       	out	0x18, r22	; 24
 5e4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 5e6:	28 b3       	in	r18, 0x18	; 24
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	ac 01       	movw	r20, r24
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_vconnectpullup+0x84>
 5f0:	44 0f       	add	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_vconnectpullup+0x80>
 5f8:	ba 01       	movw	r22, r20
 5fa:	60 95       	com	r22
 5fc:	62 23       	and	r22, r18
 5fe:	68 bb       	out	0x18, r22	; 24
 600:	08 95       	ret
		}
		break;
	case 'C':
	if(connect_pullup==1)
 602:	41 30       	cpi	r20, 0x01	; 1
 604:	69 f4       	brne	.+26     	; 0x620 <DIO_vconnectpullup+0xb0>
	{
		SET_BIT(PORTC,pinnumber);
 606:	25 b3       	in	r18, 0x15	; 21
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	ac 01       	movw	r20, r24
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_vconnectpullup+0xa4>
 610:	44 0f       	add	r20, r20
 612:	55 1f       	adc	r21, r21
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_vconnectpullup+0xa0>
 618:	ba 01       	movw	r22, r20
 61a:	62 2b       	or	r22, r18
 61c:	65 bb       	out	0x15, r22	; 21
 61e:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTC,pinnumber);
 620:	25 b3       	in	r18, 0x15	; 21
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	ac 01       	movw	r20, r24
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_vconnectpullup+0xbe>
 62a:	44 0f       	add	r20, r20
 62c:	55 1f       	adc	r21, r21
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_vconnectpullup+0xba>
 632:	ba 01       	movw	r22, r20
 634:	60 95       	com	r22
 636:	62 23       	and	r22, r18
 638:	65 bb       	out	0x15, r22	; 21
 63a:	08 95       	ret
	}
	break;
	case 'D':
	if(connect_pullup==1)
 63c:	41 30       	cpi	r20, 0x01	; 1
 63e:	69 f4       	brne	.+26     	; 0x65a <DIO_vconnectpullup+0xea>
	{
		SET_BIT(PORTD,pinnumber);
 640:	22 b3       	in	r18, 0x12	; 18
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	ac 01       	movw	r20, r24
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_vconnectpullup+0xde>
 64a:	44 0f       	add	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_vconnectpullup+0xda>
 652:	ba 01       	movw	r22, r20
 654:	62 2b       	or	r22, r18
 656:	62 bb       	out	0x12, r22	; 18
 658:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTD,pinnumber);
 65a:	22 b3       	in	r18, 0x12	; 18
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	ac 01       	movw	r20, r24
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_vconnectpullup+0xf8>
 664:	44 0f       	add	r20, r20
 666:	55 1f       	adc	r21, r21
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_vconnectpullup+0xf4>
 66c:	ba 01       	movw	r22, r20
 66e:	60 95       	com	r22
 670:	62 23       	and	r22, r18
 672:	62 bb       	out	0x12, r22	; 18
 674:	08 95       	ret

00000676 <write_low_nibble>:
}

	//We will increase  these two functions in DIO.c
	void write_low_nibble(unsigned char portname,unsigned char value)
	{
		value&=0x0f;
 676:	6f 70       	andi	r22, 0x0F	; 15
		switch(portname)
 678:	82 34       	cpi	r24, 0x42	; 66
 67a:	89 f0       	breq	.+34     	; 0x69e <write_low_nibble+0x28>
 67c:	83 34       	cpi	r24, 0x43	; 67
 67e:	18 f4       	brcc	.+6      	; 0x686 <write_low_nibble+0x10>
 680:	81 34       	cpi	r24, 0x41	; 65
 682:	09 f5       	brne	.+66     	; 0x6c6 <write_low_nibble+0x50>
 684:	05 c0       	rjmp	.+10     	; 0x690 <write_low_nibble+0x1a>
 686:	83 34       	cpi	r24, 0x43	; 67
 688:	89 f0       	breq	.+34     	; 0x6ac <write_low_nibble+0x36>
 68a:	84 34       	cpi	r24, 0x44	; 68
 68c:	e1 f4       	brne	.+56     	; 0x6c6 <write_low_nibble+0x50>
 68e:	15 c0       	rjmp	.+42     	; 0x6ba <write_low_nibble+0x44>
		{
			case 'A':
			PORTA&=0xf0;// 0b11110000
 690:	8b b3       	in	r24, 0x1b	; 27
 692:	80 7f       	andi	r24, 0xF0	; 240
 694:	8b bb       	out	0x1b, r24	; 27
			PORTA|=value;
 696:	8b b3       	in	r24, 0x1b	; 27
 698:	68 2b       	or	r22, r24
 69a:	6b bb       	out	0x1b, r22	; 27
			break;
 69c:	08 95       	ret
			case 'B':
			PORTB&=0xf0;
 69e:	88 b3       	in	r24, 0x18	; 24
 6a0:	80 7f       	andi	r24, 0xF0	; 240
 6a2:	88 bb       	out	0x18, r24	; 24
			PORTB|=value;
 6a4:	88 b3       	in	r24, 0x18	; 24
 6a6:	68 2b       	or	r22, r24
 6a8:	68 bb       	out	0x18, r22	; 24
			break;
 6aa:	08 95       	ret
case 'C':
PORTC&=0xf0;
 6ac:	85 b3       	in	r24, 0x15	; 21
 6ae:	80 7f       	andi	r24, 0xF0	; 240
 6b0:	85 bb       	out	0x15, r24	; 21
PORTC|=value;
 6b2:	85 b3       	in	r24, 0x15	; 21
 6b4:	68 2b       	or	r22, r24
 6b6:	65 bb       	out	0x15, r22	; 21
break;
 6b8:	08 95       	ret
case 'D':
PORTD&=0xf0;
 6ba:	82 b3       	in	r24, 0x12	; 18
 6bc:	80 7f       	andi	r24, 0xF0	; 240
 6be:	82 bb       	out	0x12, r24	; 18
PORTD|=value;
 6c0:	82 b3       	in	r24, 0x12	; 18
 6c2:	68 2b       	or	r22, r24
 6c4:	62 bb       	out	0x12, r22	; 18
 6c6:	08 95       	ret

000006c8 <write_high_nibble>:
}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 6c8:	62 95       	swap	r22
 6ca:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 6cc:	82 34       	cpi	r24, 0x42	; 66
 6ce:	89 f0       	breq	.+34     	; 0x6f2 <write_high_nibble+0x2a>
 6d0:	83 34       	cpi	r24, 0x43	; 67
 6d2:	18 f4       	brcc	.+6      	; 0x6da <write_high_nibble+0x12>
 6d4:	81 34       	cpi	r24, 0x41	; 65
 6d6:	09 f5       	brne	.+66     	; 0x71a <write_high_nibble+0x52>
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <write_high_nibble+0x1c>
 6da:	83 34       	cpi	r24, 0x43	; 67
 6dc:	89 f0       	breq	.+34     	; 0x700 <write_high_nibble+0x38>
 6de:	84 34       	cpi	r24, 0x44	; 68
 6e0:	e1 f4       	brne	.+56     	; 0x71a <write_high_nibble+0x52>
 6e2:	15 c0       	rjmp	.+42     	; 0x70e <write_high_nibble+0x46>
	{
		case 'A':
		PORTA&=0x0f;
 6e4:	8b b3       	in	r24, 0x1b	; 27
 6e6:	8f 70       	andi	r24, 0x0F	; 15
 6e8:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 6ea:	8b b3       	in	r24, 0x1b	; 27
 6ec:	68 2b       	or	r22, r24
 6ee:	6b bb       	out	0x1b, r22	; 27
		break;
 6f0:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
 6f2:	88 b3       	in	r24, 0x18	; 24
 6f4:	8f 70       	andi	r24, 0x0F	; 15
 6f6:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 6f8:	88 b3       	in	r24, 0x18	; 24
 6fa:	68 2b       	or	r22, r24
 6fc:	68 bb       	out	0x18, r22	; 24
		break;
 6fe:	08 95       	ret
		case 'C':
		PORTC&=0x0f;
 700:	85 b3       	in	r24, 0x15	; 21
 702:	8f 70       	andi	r24, 0x0F	; 15
 704:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 706:	85 b3       	in	r24, 0x15	; 21
 708:	68 2b       	or	r22, r24
 70a:	65 bb       	out	0x15, r22	; 21
		break;
 70c:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
 70e:	82 b3       	in	r24, 0x12	; 18
 710:	8f 70       	andi	r24, 0x0F	; 15
 712:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 714:	82 b3       	in	r24, 0x12	; 18
 716:	68 2b       	or	r22, r24
 718:	62 bb       	out	0x12, r22	; 18
 71a:	08 95       	ret

0000071c <send_falling_edge>:



static void send_falling_edge(void)
{
	DIO_vwrite('B',EN,1);//V=5
 71c:	82 e4       	ldi	r24, 0x42	; 66
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 726:	8f e9       	ldi	r24, 0x9F	; 159
 728:	9f e0       	ldi	r25, 0x0F	; 15
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <send_falling_edge+0xe>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <send_falling_edge+0x14>
 730:	00 00       	nop
	_delay_ms(2);
	DIO_vwrite('B',EN,0); //V=0
 732:	82 e4       	ldi	r24, 0x42	; 66
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
 73c:	8f e9       	ldi	r24, 0x9F	; 159
 73e:	9f e0       	ldi	r25, 0x0F	; 15
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <send_falling_edge+0x24>
 744:	00 c0       	rjmp	.+0      	; 0x746 <send_falling_edge+0x2a>
 746:	00 00       	nop
	_delay_ms(2);
}
 748:	08 95       	ret

0000074a <LCD_vsend_cmd>:


void LCD_vsend_cmd(char cmd)
{
 74a:	cf 93       	push	r28
 74c:	c8 2f       	mov	r28, r24
	DIO_vWRITEport('D',cmd);
	DIO_vwrite('B',RS,0);//commend reg
	send_falling_edge();

	#elif defined four_bits_mode
	write_high_nibble('D',cmd>>4);
 74e:	68 2f       	mov	r22, r24
 750:	62 95       	swap	r22
 752:	6f 70       	andi	r22, 0x0F	; 15
 754:	84 e4       	ldi	r24, 0x44	; 68
 756:	0e 94 64 03 	call	0x6c8	; 0x6c8 <write_high_nibble>
	DIO_vwrite('B',RS,0);
 75a:	82 e4       	ldi	r24, 0x42	; 66
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
	send_falling_edge();
 764:	0e 94 8e 03 	call	0x71c	; 0x71c <send_falling_edge>
	
	write_high_nibble('D',cmd);
 768:	84 e4       	ldi	r24, 0x44	; 68
 76a:	6c 2f       	mov	r22, r28
 76c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <write_high_nibble>
	DIO_vwrite('B',RS,0);
 770:	82 e4       	ldi	r24, 0x42	; 66
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	40 e0       	ldi	r20, 0x00	; 0
 776:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
	send_falling_edge();
 77a:	0e 94 8e 03 	call	0x71c	; 0x71c <send_falling_edge>
 77e:	8f ec       	ldi	r24, 0xCF	; 207
 780:	97 e0       	ldi	r25, 0x07	; 7
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <LCD_vsend_cmd+0x38>
 786:	00 c0       	rjmp	.+0      	; 0x788 <LCD_vsend_cmd+0x3e>
 788:	00 00       	nop
	_delay_ms(1);
	#endif
}
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <LCD_vinit>:
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	91 ee       	ldi	r25, 0xE1	; 225
 792:	a4 e0       	ldi	r26, 0x04	; 4
 794:	81 50       	subi	r24, 0x01	; 1
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	a0 40       	sbci	r26, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <LCD_vinit+0x6>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <LCD_vinit+0x10>
 79e:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);

	#elif defined four_bits_mode
		DIO_vsetpindir('D',4,1);
 7a0:	84 e4       	ldi	r24, 0x44	; 68
 7a2:	64 e0       	ldi	r22, 0x04	; 4
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
		DIO_vsetpindir('D',5,1);
 7aa:	84 e4       	ldi	r24, 0x44	; 68
 7ac:	65 e0       	ldi	r22, 0x05	; 5
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
		DIO_vsetpindir('D',6,1);
 7b4:	84 e4       	ldi	r24, 0x44	; 68
 7b6:	66 e0       	ldi	r22, 0x06	; 6
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
		DIO_vsetpindir('D',7,1);
 7be:	84 e4       	ldi	r24, 0x44	; 68
 7c0:	67 e0       	ldi	r22, 0x07	; 7
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
		DIO_vsetpindir('B',EN,1);
 7c8:	82 e4       	ldi	r24, 0x42	; 66
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
		DIO_vsetpindir('B',RW,1);
 7d2:	82 e4       	ldi	r24, 0x42	; 66
 7d4:	62 e0       	ldi	r22, 0x02	; 2
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
		DIO_vsetpindir('B',RS,1);
 7dc:	82 e4       	ldi	r24, 0x42	; 66
 7de:	61 e0       	ldi	r22, 0x01	; 1
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>

DIO_vwrite('D',RW,0);
 7e6:	84 e4       	ldi	r24, 0x44	; 68
 7e8:	62 e0       	ldi	r22, 0x02	; 2
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
 LCD_vsend_cmd(RETURN_HOME); //return home
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vsend_cmd>
 7f6:	af e1       	ldi	r26, 0x1F	; 31
 7f8:	be e4       	ldi	r27, 0x4E	; 78
 7fa:	11 97       	sbiw	r26, 0x01	; 1
 7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCD_vinit+0x6c>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <LCD_vinit+0x72>
 800:	00 00       	nop
 _delay_ms(10);
 LCD_vsend_cmd(FOUR_BITS); //4bit mode 0X28
 802:	88 e2       	ldi	r24, 0x28	; 40
 804:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vsend_cmd>
 808:	8f ec       	ldi	r24, 0xCF	; 207
 80a:	97 e0       	ldi	r25, 0x07	; 7
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	f1 f7       	brne	.-4      	; 0x80c <LCD_vinit+0x7e>
 810:	00 c0       	rjmp	.+0      	; 0x812 <LCD_vinit+0x84>
 812:	00 00       	nop
 _delay_ms(1);
 LCD_vsend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 814:	8c e0       	ldi	r24, 0x0C	; 12
 816:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vsend_cmd>
 81a:	af ec       	ldi	r26, 0xCF	; 207
 81c:	b7 e0       	ldi	r27, 0x07	; 7
 81e:	11 97       	sbiw	r26, 0x01	; 1
 820:	f1 f7       	brne	.-4      	; 0x81e <LCD_vinit+0x90>
 822:	00 c0       	rjmp	.+0      	; 0x824 <LCD_vinit+0x96>
 824:	00 00       	nop
 _delay_ms(1);
 LCD_vsend_cmd(CLR_SCREEN);//clear the screen
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vsend_cmd>
 82c:	8f e1       	ldi	r24, 0x1F	; 31
 82e:	9e e4       	ldi	r25, 0x4E	; 78
 830:	01 97       	sbiw	r24, 0x01	; 1
 832:	f1 f7       	brne	.-4      	; 0x830 <LCD_vinit+0xa2>
 834:	00 c0       	rjmp	.+0      	; 0x836 <LCD_vinit+0xa8>
 836:	00 00       	nop
 _delay_ms(10);
 LCD_vsend_cmd(ENTRY_MODE); //entry mode
 838:	86 e0       	ldi	r24, 0x06	; 6
 83a:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vsend_cmd>
 83e:	af ec       	ldi	r26, 0xCF	; 207
 840:	b7 e0       	ldi	r27, 0x07	; 7
 842:	11 97       	sbiw	r26, 0x01	; 1
 844:	f1 f7       	brne	.-4      	; 0x842 <LCD_vinit+0xb4>
 846:	00 c0       	rjmp	.+0      	; 0x848 <LCD_vinit+0xba>
 848:	00 00       	nop
 _delay_ms(1);
 #endif
}
 84a:	08 95       	ret

0000084c <LCD_vsend_char>:
	#endif
}


void LCD_vsend_char(char data)
{
 84c:	cf 93       	push	r28
 84e:	c8 2f       	mov	r28, r24
	DIO_write_port('D',data);
	DIO_write('B',RS,1);// data reg
	send_falling_edge();

	#elif defined four_bits_mode
	write_high_nibble('D',data>>4);
 850:	68 2f       	mov	r22, r24
 852:	62 95       	swap	r22
 854:	6f 70       	andi	r22, 0x0F	; 15
 856:	84 e4       	ldi	r24, 0x44	; 68
 858:	0e 94 64 03 	call	0x6c8	; 0x6c8 <write_high_nibble>
	DIO_vwrite('B',RS,1);
 85c:	82 e4       	ldi	r24, 0x42	; 66
 85e:	61 e0       	ldi	r22, 0x01	; 1
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
	send_falling_edge();
 866:	0e 94 8e 03 	call	0x71c	; 0x71c <send_falling_edge>
	
	write_high_nibble('D',data);
 86a:	84 e4       	ldi	r24, 0x44	; 68
 86c:	6c 2f       	mov	r22, r28
 86e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <write_high_nibble>
	DIO_vwrite('B',RS,1);
 872:	82 e4       	ldi	r24, 0x42	; 66
 874:	61 e0       	ldi	r22, 0x01	; 1
 876:	41 e0       	ldi	r20, 0x01	; 1
 878:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
	send_falling_edge();
 87c:	0e 94 8e 03 	call	0x71c	; 0x71c <send_falling_edge>
 880:	8f ec       	ldi	r24, 0xCF	; 207
 882:	97 e0       	ldi	r25, 0x07	; 7
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <__stack+0x25>
 888:	00 c0       	rjmp	.+0      	; 0x88a <__stack+0x2b>
 88a:	00 00       	nop
	
	_delay_ms(1);
	#endif
}
 88c:	cf 91       	pop	r28
 88e:	08 95       	ret

00000890 <LCD_vsend_string>:

void LCD_vsend_string(char *data)
{
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 896:	88 81       	ld	r24, Y
 898:	88 23       	and	r24, r24
 89a:	31 f0       	breq	.+12     	; 0x8a8 <LCD_vsend_string+0x18>
	
	_delay_ms(1);
	#endif
}

void LCD_vsend_string(char *data)
 89c:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vsend_char(*data);
 89e:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
	#endif
}

void LCD_vsend_string(char *data)
{
	while((*data)!='\0')
 8a2:	89 91       	ld	r24, Y+
 8a4:	88 23       	and	r24, r24
 8a6:	d9 f7       	brne	.-10     	; 0x89e <LCD_vsend_string+0xe>
	{
		LCD_vsend_char(*data);
		data++;
	}
}
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	08 95       	ret

000008ae <LCD_clearscreen>:


void LCD_clearscreen()
{
	LCD_vsend_cmd(CLR_SCREEN);//0x01
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vsend_cmd>
 8b4:	8f e1       	ldi	r24, 0x1F	; 31
 8b6:	9e e4       	ldi	r25, 0x4E	; 78
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <LCD_clearscreen+0xa>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <LCD_clearscreen+0x10>
 8be:	00 00       	nop
	_delay_ms(10);
}
 8c0:	08 95       	ret

000008c2 <LCD_movecursor>:

void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row >    2 || row     <  1  || coloumn > 16 || coloumn<1)
 8c2:	28 2f       	mov	r18, r24
 8c4:	21 50       	subi	r18, 0x01	; 1
 8c6:	22 30       	cpi	r18, 0x02	; 2
 8c8:	70 f4       	brcc	.+28     	; 0x8e6 <LCD_movecursor+0x24>
 8ca:	61 31       	cpi	r22, 0x11	; 17
 8cc:	70 f4       	brcc	.+28     	; 0x8ea <LCD_movecursor+0x28>
 8ce:	66 23       	and	r22, r22
 8d0:	71 f0       	breq	.+28     	; 0x8ee <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	
	else if(row==1)
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	19 f4       	brne	.+6      	; 0x8dc <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 8d6:	96 2f       	mov	r25, r22
 8d8:	91 58       	subi	r25, 0x81	; 129
 8da:	0a c0       	rjmp	.+20     	; 0x8f0 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 8dc:	82 30       	cpi	r24, 0x02	; 2
 8de:	41 f4       	brne	.+16     	; 0x8f0 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 8e0:	96 2f       	mov	r25, r22
 8e2:	91 54       	subi	r25, 0x41	; 65
 8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row >    2 || row     <  1  || coloumn > 16 || coloumn<1)
	{
		data=0x80;
 8e6:	90 e8       	ldi	r25, 0x80	; 128
 8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <LCD_movecursor+0x2e>
 8ea:	90 e8       	ldi	r25, 0x80	; 128
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <LCD_movecursor+0x2e>
 8ee:	90 e8       	ldi	r25, 0x80	; 128
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	
	LCD_vsend_cmd(data);
 8f0:	89 2f       	mov	r24, r25
 8f2:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_vsend_cmd>
 8f6:	8f ec       	ldi	r24, 0xCF	; 207
 8f8:	97 e0       	ldi	r25, 0x07	; 7
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCD_movecursor+0x38>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <LCD_movecursor+0x3e>
 900:	00 00       	nop
	_delay_ms(1);
}
 902:	08 95       	ret

00000904 <main>:
char read_val;
unsigned short temperature;
 volatile unsigned short sec=50,min=0,hour=12;
 char temp=0;
int main(void)
{
 904:	cf 92       	push	r12
 906:	df 92       	push	r13
 908:	ef 92       	push	r14
 90a:	ff 92       	push	r15
 90c:	0f 93       	push	r16
 90e:	1f 93       	push	r17
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
	ADC_vinit();
 914:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vinit>
	LCD_vinit();
 918:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_vinit>
	
	LCD_vsend_string("temperature=");
 91c:	80 e6       	ldi	r24, 0x60	; 96
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 48 04 	call	0x890	; 0x890 <LCD_vsend_string>
DIO_vsetpindir('D',1,1);
 924:	84 e4       	ldi	r24, 0x44	; 68
 926:	61 e0       	ldi	r22, 0x01	; 1
 928:	41 e0       	ldi	r20, 0x01	; 1
 92a:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
	DIO_vsetpindir('D',0,1);//OUTPUT ==1   INPUT 0
 92e:	84 e4       	ldi	r24, 0x44	; 68
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	41 e0       	ldi	r20, 0x01	; 1
 934:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
	DIO_vsetpindir('D',2,1);//BUZZER
 938:	84 e4       	ldi	r24, 0x44	; 68
 93a:	62 e0       	ldi	r22, 0x02	; 2
 93c:	41 e0       	ldi	r20, 0x01	; 1
 93e:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetpindir>
		
		if(temperature<10 )
		{
			LCD_movecursor(1,13);
			//LCD_vsend_char(0x30);
			LCD_vsend_char((temperature%10)+48);
 942:	ca e0       	ldi	r28, 0x0A	; 10
 944:	d0 e0       	ldi	r29, 0x00	; 0
		LCD_vsend_char((sec%10)+48);
		
			if (temp==0)
			{
				LCD_movecursor(2,6);
				LCD_vsend_string("AM");
 946:	0d e6       	ldi	r16, 0x6D	; 109
 948:	10 e0       	ldi	r17, 0x00	; 0
	
	
	if ((sec==59)&&(hour==12))
	{
		sec=0;
		hour=1;
 94a:	ee 24       	eor	r14, r14
 94c:	ff 24       	eor	r15, r15
 94e:	e3 94       	inc	r14
		temp=1;
			LCD_movecursor(2,6);
		LCD_vsend_string("PM");
 950:	0f 2e       	mov	r0, r31
 952:	f0 e7       	ldi	r31, 0x70	; 112
 954:	cf 2e       	mov	r12, r31
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	df 2e       	mov	r13, r31
 95a:	f0 2d       	mov	r31, r0
	DIO_vsetpindir('D',0,1);//OUTPUT ==1   INPUT 0
	DIO_vsetpindir('D',2,1);//BUZZER
	while(1)
	{
		//TODO:: Please write your application code
		temperature=((ADC_Read())*0.25);
 95c:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 960:	bc 01       	movw	r22, r24
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 ba 06 	call	0xd74	; 0xd74 <__floatunsisf>
 96a:	20 e0       	ldi	r18, 0x00	; 0
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	40 e8       	ldi	r20, 0x80	; 128
 970:	5e e3       	ldi	r21, 0x3E	; 62
 972:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 976:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fixunssfsi>
 97a:	ab 01       	movw	r20, r22
 97c:	bc 01       	movw	r22, r24
 97e:	50 93 7c 00 	sts	0x007C, r21
 982:	40 93 7b 00 	sts	0x007B, r20
		
		if(temperature<10 )
 986:	4a 30       	cpi	r20, 0x0A	; 10
 988:	51 05       	cpc	r21, r1
 98a:	10 f5       	brcc	.+68     	; 0x9d0 <main+0xcc>
		{
			LCD_movecursor(1,13);
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	6d e0       	ldi	r22, 0x0D	; 13
 990:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			//LCD_vsend_char(0x30);
			LCD_vsend_char((temperature%10)+48);
 994:	80 91 7b 00 	lds	r24, 0x007B
 998:	90 91 7c 00 	lds	r25, 0x007C
 99c:	be 01       	movw	r22, r28
 99e:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 9a2:	80 5d       	subi	r24, 0xD0	; 208
 9a4:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_vsend_char(0xDF);
 9a8:	8f ed       	ldi	r24, 0xDF	; 223
 9aa:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_vsend_char(0x43);
 9ae:	83 e4       	ldi	r24, 0x43	; 67
 9b0:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_vsend_char(0x20);//clear bit
 9b4:	80 e2       	ldi	r24, 0x20	; 32
 9b6:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			DIO_vwrite('D',1,1);
 9ba:	84 e4       	ldi	r24, 0x44	; 68
 9bc:	61 e0       	ldi	r22, 0x01	; 1
 9be:	41 e0       	ldi	r20, 0x01	; 1
 9c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
			DIO_vwrite('D',0,0); //RED
 9c4:	84 e4       	ldi	r24, 0x44	; 68
 9c6:	60 e0       	ldi	r22, 0x00	; 0
 9c8:	40 e0       	ldi	r20, 0x00	; 0
 9ca:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
 9ce:	49 c0       	rjmp	.+146    	; 0xa62 <main+0x15e>
		}
		
		else if( temperature<100)
 9d0:	44 36       	cpi	r20, 0x64	; 100
 9d2:	51 05       	cpc	r21, r1
 9d4:	08 f0       	brcs	.+2      	; 0x9d8 <main+0xd4>
 9d6:	45 c0       	rjmp	.+138    	; 0xa62 <main+0x15e>
		{
			LCD_movecursor(1,13);
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	6d e0       	ldi	r22, 0x0D	; 13
 9dc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			LCD_vsend_char((temperature/10)+48);
 9e0:	80 91 7b 00 	lds	r24, 0x007B
 9e4:	90 91 7c 00 	lds	r25, 0x007C
 9e8:	be 01       	movw	r22, r28
 9ea:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 9ee:	86 2f       	mov	r24, r22
 9f0:	80 5d       	subi	r24, 0xD0	; 208
 9f2:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_vsend_char((temperature%10)+48);
 9f6:	80 91 7b 00 	lds	r24, 0x007B
 9fa:	90 91 7c 00 	lds	r25, 0x007C
 9fe:	be 01       	movw	r22, r28
 a00:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 a04:	80 5d       	subi	r24, 0xD0	; 208
 a06:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_vsend_char(0xDF);
 a0a:	8f ed       	ldi	r24, 0xDF	; 223
 a0c:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_vsend_char(0x43);
 a10:	83 e4       	ldi	r24, 0x43	; 67
 a12:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			
			if (temperature>=50)
 a16:	80 91 7b 00 	lds	r24, 0x007B
 a1a:	90 91 7c 00 	lds	r25, 0x007C
 a1e:	82 33       	cpi	r24, 0x32	; 50
 a20:	91 05       	cpc	r25, r1
 a22:	80 f0       	brcs	.+32     	; 0xa44 <main+0x140>
			{
				DIO_vwrite('D',1,0);
 a24:	84 e4       	ldi	r24, 0x44	; 68
 a26:	61 e0       	ldi	r22, 0x01	; 1
 a28:	40 e0       	ldi	r20, 0x00	; 0
 a2a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
				DIO_vwrite('D',0,1); //RED
 a2e:	84 e4       	ldi	r24, 0x44	; 68
 a30:	60 e0       	ldi	r22, 0x00	; 0
 a32:	41 e0       	ldi	r20, 0x01	; 1
 a34:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
				DIO_vwrite('D',2,1); //BUZZER
 a38:	84 e4       	ldi	r24, 0x44	; 68
 a3a:	62 e0       	ldi	r22, 0x02	; 2
 a3c:	41 e0       	ldi	r20, 0x01	; 1
 a3e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
 a42:	0f c0       	rjmp	.+30     	; 0xa62 <main+0x15e>
			} 
			else
			{
				DIO_vwrite('D',1,1);
 a44:	84 e4       	ldi	r24, 0x44	; 68
 a46:	61 e0       	ldi	r22, 0x01	; 1
 a48:	41 e0       	ldi	r20, 0x01	; 1
 a4a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
				DIO_vwrite('D',0,0); //RED
 a4e:	84 e4       	ldi	r24, 0x44	; 68
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	40 e0       	ldi	r20, 0x00	; 0
 a54:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
				DIO_vwrite('D',2,0); //BUZZER
 a58:	84 e4       	ldi	r24, 0x44	; 68
 a5a:	62 e0       	ldi	r22, 0x02	; 2
 a5c:	40 e0       	ldi	r20, 0x00	; 0
 a5e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwrite>
		
		
	
	
	
		 if (sec < 10)
 a62:	80 91 75 00 	lds	r24, 0x0075
 a66:	90 91 76 00 	lds	r25, 0x0076
 a6a:	8a 30       	cpi	r24, 0x0A	; 10
 a6c:	91 05       	cpc	r25, r1
 a6e:	08 f0       	brcs	.+2      	; 0xa72 <main+0x16e>
 a70:	5a c0       	rjmp	.+180    	; 0xb26 <main+0x222>
		{
			LCD_movecursor(2,1);
 a72:	82 e0       	ldi	r24, 0x02	; 2
 a74:	61 e0       	ldi	r22, 0x01	; 1
 a76:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
				LCD_vsend_char((hour/10)+48);
 a7a:	80 91 73 00 	lds	r24, 0x0073
 a7e:	90 91 74 00 	lds	r25, 0x0074
 a82:	be 01       	movw	r22, r28
 a84:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 a88:	86 2f       	mov	r24, r22
 a8a:	80 5d       	subi	r24, 0xD0	; 208
 a8c:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_vsend_char((hour%10)+48);
 a90:	80 91 73 00 	lds	r24, 0x0073
 a94:	90 91 74 00 	lds	r25, 0x0074
 a98:	be 01       	movw	r22, r28
 a9a:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 a9e:	80 5d       	subi	r24, 0xD0	; 208
 aa0:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_movecursor(2,3);
 aa4:	82 e0       	ldi	r24, 0x02	; 2
 aa6:	63 e0       	ldi	r22, 0x03	; 3
 aa8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			LCD_vsend_char(':');
 aac:	8a e3       	ldi	r24, 0x3A	; 58
 aae:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_movecursor(2,4);
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	64 e0       	ldi	r22, 0x04	; 4
 ab6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			LCD_vsend_char((min%10)+48);
 aba:	80 91 79 00 	lds	r24, 0x0079
 abe:	90 91 7a 00 	lds	r25, 0x007A
 ac2:	be 01       	movw	r22, r28
 ac4:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 ac8:	80 5d       	subi	r24, 0xD0	; 208
 aca:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_movecursor(2,5);
 ace:	82 e0       	ldi	r24, 0x02	; 2
 ad0:	65 e0       	ldi	r22, 0x05	; 5
 ad2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			LCD_vsend_char((sec%10)+48);
 ad6:	80 91 75 00 	lds	r24, 0x0075
 ada:	90 91 76 00 	lds	r25, 0x0076
 ade:	be 01       	movw	r22, r28
 ae0:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 ae4:	80 5d       	subi	r24, 0xD0	; 208
 ae6:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			if (temp==0)
 aea:	80 91 78 00 	lds	r24, 0x0078
 aee:	88 23       	and	r24, r24
 af0:	39 f4       	brne	.+14     	; 0xb00 <main+0x1fc>
			{
					LCD_movecursor(2,6);
 af2:	82 e0       	ldi	r24, 0x02	; 2
 af4:	66 e0       	ldi	r22, 0x06	; 6
 af6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
					LCD_vsend_string("AM");
 afa:	c8 01       	movw	r24, r16
 afc:	0e 94 48 04 	call	0x890	; 0x890 <LCD_vsend_string>
 b00:	8f ef       	ldi	r24, 0xFF	; 255
 b02:	99 e6       	ldi	r25, 0x69	; 105
 b04:	a8 e1       	ldi	r26, 0x18	; 24
 b06:	81 50       	subi	r24, 0x01	; 1
 b08:	90 40       	sbci	r25, 0x00	; 0
 b0a:	a0 40       	sbci	r26, 0x00	; 0
 b0c:	e1 f7       	brne	.-8      	; 0xb06 <main+0x202>
 b0e:	00 c0       	rjmp	.+0      	; 0xb10 <main+0x20c>
 b10:	00 00       	nop
			}
			
			_delay_ms(1000);
			sec++;
 b12:	80 91 75 00 	lds	r24, 0x0075
 b16:	90 91 76 00 	lds	r25, 0x0076
 b1a:	01 96       	adiw	r24, 0x01	; 1
 b1c:	90 93 76 00 	sts	0x0076, r25
 b20:	80 93 75 00 	sts	0x0075, r24
 b24:	cd c0       	rjmp	.+410    	; 0xcc0 <main+0x3bc>
			
		} else if(sec <= 59 || hour >= 12 ){
 b26:	80 91 75 00 	lds	r24, 0x0075
 b2a:	90 91 76 00 	lds	r25, 0x0076
 b2e:	8c 33       	cpi	r24, 0x3C	; 60
 b30:	91 05       	cpc	r25, r1
 b32:	40 f0       	brcs	.+16     	; 0xb44 <main+0x240>
 b34:	80 91 73 00 	lds	r24, 0x0073
 b38:	90 91 74 00 	lds	r25, 0x0074
 b3c:	8c 30       	cpi	r24, 0x0C	; 12
 b3e:	91 05       	cpc	r25, r1
 b40:	08 f4       	brcc	.+2      	; 0xb44 <main+0x240>
 b42:	66 c0       	rjmp	.+204    	; 0xc10 <main+0x30c>
		
		LCD_movecursor(2,1);
 b44:	82 e0       	ldi	r24, 0x02	; 2
 b46:	61 e0       	ldi	r22, 0x01	; 1
 b48:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
		LCD_vsend_char((hour/10)+48);
 b4c:	80 91 73 00 	lds	r24, 0x0073
 b50:	90 91 74 00 	lds	r25, 0x0074
 b54:	be 01       	movw	r22, r28
 b56:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 b5a:	86 2f       	mov	r24, r22
 b5c:	80 5d       	subi	r24, 0xD0	; 208
 b5e:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
		LCD_vsend_char((hour%10)+48);
 b62:	80 91 73 00 	lds	r24, 0x0073
 b66:	90 91 74 00 	lds	r25, 0x0074
 b6a:	be 01       	movw	r22, r28
 b6c:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 b70:	80 5d       	subi	r24, 0xD0	; 208
 b72:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
	LCD_movecursor(2,3);
 b76:	82 e0       	ldi	r24, 0x02	; 2
 b78:	63 e0       	ldi	r22, 0x03	; 3
 b7a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
		LCD_vsend_char(':');
 b7e:	8a e3       	ldi	r24, 0x3A	; 58
 b80:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
		LCD_movecursor(2,4);
 b84:	82 e0       	ldi	r24, 0x02	; 2
 b86:	64 e0       	ldi	r22, 0x04	; 4
 b88:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
		LCD_vsend_char((sec/10)+48);
 b8c:	80 91 75 00 	lds	r24, 0x0075
 b90:	90 91 76 00 	lds	r25, 0x0076
 b94:	be 01       	movw	r22, r28
 b96:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 b9a:	86 2f       	mov	r24, r22
 b9c:	80 5d       	subi	r24, 0xD0	; 208
 b9e:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
		LCD_vsend_char((sec%10)+48);
 ba2:	80 91 75 00 	lds	r24, 0x0075
 ba6:	90 91 76 00 	lds	r25, 0x0076
 baa:	be 01       	movw	r22, r28
 bac:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 bb0:	80 5d       	subi	r24, 0xD0	; 208
 bb2:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
		
			if (temp==0)
 bb6:	80 91 78 00 	lds	r24, 0x0078
 bba:	88 23       	and	r24, r24
 bbc:	39 f4       	brne	.+14     	; 0xbcc <main+0x2c8>
			{
				LCD_movecursor(2,6);
 bbe:	82 e0       	ldi	r24, 0x02	; 2
 bc0:	66 e0       	ldi	r22, 0x06	; 6
 bc2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
				LCD_vsend_string("AM");
 bc6:	c8 01       	movw	r24, r16
 bc8:	0e 94 48 04 	call	0x890	; 0x890 <LCD_vsend_string>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	99 e6       	ldi	r25, 0x69	; 105
 bd0:	a8 e1       	ldi	r26, 0x18	; 24
 bd2:	81 50       	subi	r24, 0x01	; 1
 bd4:	90 40       	sbci	r25, 0x00	; 0
 bd6:	a0 40       	sbci	r26, 0x00	; 0
 bd8:	e1 f7       	brne	.-8      	; 0xbd2 <main+0x2ce>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <main+0x2d8>
 bdc:	00 00       	nop
			}
		
	
			_delay_ms(1000);
				
			if ((sec==59)&&(hour==12))
 bde:	80 91 75 00 	lds	r24, 0x0075
 be2:	90 91 76 00 	lds	r25, 0x0076
 be6:	8b 33       	cpi	r24, 0x3B	; 59
 be8:	91 05       	cpc	r25, r1
 bea:	41 f4       	brne	.+16     	; 0xbfc <main+0x2f8>
 bec:	80 91 73 00 	lds	r24, 0x0073
 bf0:	90 91 74 00 	lds	r25, 0x0074
 bf4:	8c 30       	cpi	r24, 0x0C	; 12
 bf6:	91 05       	cpc	r25, r1
 bf8:	09 f4       	brne	.+2      	; 0xbfc <main+0x2f8>
 bfa:	85 c0       	rjmp	.+266    	; 0xd06 <main+0x402>
			{
				break;
			}
			  
			sec++;
 bfc:	80 91 75 00 	lds	r24, 0x0075
 c00:	90 91 76 00 	lds	r25, 0x0076
 c04:	01 96       	adiw	r24, 0x01	; 1
 c06:	90 93 76 00 	sts	0x0076, r25
 c0a:	80 93 75 00 	sts	0x0075, r24
 c0e:	58 c0       	rjmp	.+176    	; 0xcc0 <main+0x3bc>
			
		}
		else if(sec==60 || hour <= 9)
 c10:	80 91 75 00 	lds	r24, 0x0075
 c14:	90 91 76 00 	lds	r25, 0x0076
 c18:	8c 33       	cpi	r24, 0x3C	; 60
 c1a:	91 05       	cpc	r25, r1
 c1c:	41 f0       	breq	.+16     	; 0xc2e <main+0x32a>
 c1e:	80 91 73 00 	lds	r24, 0x0073
 c22:	90 91 74 00 	lds	r25, 0x0074
 c26:	8a 30       	cpi	r24, 0x0A	; 10
 c28:	91 05       	cpc	r25, r1
 c2a:	08 f0       	brcs	.+2      	; 0xc2e <main+0x32a>
 c2c:	49 c0       	rjmp	.+146    	; 0xcc0 <main+0x3bc>
		{
			sec=0;
 c2e:	10 92 76 00 	sts	0x0076, r1
 c32:	10 92 75 00 	sts	0x0075, r1
			hour++;
 c36:	80 91 73 00 	lds	r24, 0x0073
 c3a:	90 91 74 00 	lds	r25, 0x0074
 c3e:	01 96       	adiw	r24, 0x01	; 1
 c40:	90 93 74 00 	sts	0x0074, r25
 c44:	80 93 73 00 	sts	0x0073, r24
			LCD_movecursor(2,1);
 c48:	82 e0       	ldi	r24, 0x02	; 2
 c4a:	61 e0       	ldi	r22, 0x01	; 1
 c4c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			LCD_vsend_char((min%10)+48);
 c50:	80 91 79 00 	lds	r24, 0x0079
 c54:	90 91 7a 00 	lds	r25, 0x007A
 c58:	be 01       	movw	r22, r28
 c5a:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 c5e:	80 5d       	subi	r24, 0xD0	; 208
 c60:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_movecursor(2,2);
 c64:	82 e0       	ldi	r24, 0x02	; 2
 c66:	62 e0       	ldi	r22, 0x02	; 2
 c68:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			LCD_vsend_char((hour%10)+48);
 c6c:	80 91 73 00 	lds	r24, 0x0073
 c70:	90 91 74 00 	lds	r25, 0x0074
 c74:	be 01       	movw	r22, r28
 c76:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 c7a:	80 5d       	subi	r24, 0xD0	; 208
 c7c:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_movecursor(2,3);
 c80:	82 e0       	ldi	r24, 0x02	; 2
 c82:	63 e0       	ldi	r22, 0x03	; 3
 c84:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			LCD_vsend_char(':');
 c88:	8a e3       	ldi	r24, 0x3A	; 58
 c8a:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
			LCD_movecursor(2,4);
 c8e:	82 e0       	ldi	r24, 0x02	; 2
 c90:	64 e0       	ldi	r22, 0x04	; 4
 c92:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
			LCD_vsend_char((sec%10)+48);
 c96:	80 91 75 00 	lds	r24, 0x0075
 c9a:	90 91 76 00 	lds	r25, 0x0076
 c9e:	be 01       	movw	r22, r28
 ca0:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodhi4>
 ca4:	80 5d       	subi	r24, 0xD0	; 208
 ca6:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_vsend_char>
					if (temp==0)
 caa:	80 91 78 00 	lds	r24, 0x0078
 cae:	88 23       	and	r24, r24
 cb0:	39 f4       	brne	.+14     	; 0xcc0 <main+0x3bc>
					{
						LCD_movecursor(2,6);
 cb2:	82 e0       	ldi	r24, 0x02	; 2
 cb4:	66 e0       	ldi	r22, 0x06	; 6
 cb6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
						LCD_vsend_string("AM");
 cba:	c8 01       	movw	r24, r16
 cbc:	0e 94 48 04 	call	0x890	; 0x890 <LCD_vsend_string>
					}
				
	}
	
	
	if ((sec==59)&&(hour==12))
 cc0:	80 91 75 00 	lds	r24, 0x0075
 cc4:	90 91 76 00 	lds	r25, 0x0076
 cc8:	8b 33       	cpi	r24, 0x3B	; 59
 cca:	91 05       	cpc	r25, r1
 ccc:	09 f0       	breq	.+2      	; 0xcd0 <main+0x3cc>
 cce:	46 ce       	rjmp	.-884    	; 0x95c <main+0x58>
 cd0:	80 91 73 00 	lds	r24, 0x0073
 cd4:	90 91 74 00 	lds	r25, 0x0074
 cd8:	8c 30       	cpi	r24, 0x0C	; 12
 cda:	91 05       	cpc	r25, r1
 cdc:	09 f0       	breq	.+2      	; 0xce0 <main+0x3dc>
 cde:	3e ce       	rjmp	.-900    	; 0x95c <main+0x58>
	{
		sec=0;
 ce0:	10 92 76 00 	sts	0x0076, r1
 ce4:	10 92 75 00 	sts	0x0075, r1
		hour=1;
 ce8:	f0 92 74 00 	sts	0x0074, r15
 cec:	e0 92 73 00 	sts	0x0073, r14
		temp=1;
 cf0:	81 e0       	ldi	r24, 0x01	; 1
 cf2:	80 93 78 00 	sts	0x0078, r24
			LCD_movecursor(2,6);
 cf6:	82 e0       	ldi	r24, 0x02	; 2
 cf8:	66 e0       	ldi	r22, 0x06	; 6
 cfa:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_movecursor>
		LCD_vsend_string("PM");
 cfe:	c6 01       	movw	r24, r12
 d00:	0e 94 48 04 	call	0x890	; 0x890 <LCD_vsend_string>
 d04:	2b ce       	rjmp	.-938    	; 0x95c <main+0x58>
	}


		
		
	}
 d06:	80 e0       	ldi	r24, 0x00	; 0
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	df 91       	pop	r29
 d0c:	cf 91       	pop	r28
 d0e:	1f 91       	pop	r17
 d10:	0f 91       	pop	r16
 d12:	ff 90       	pop	r15
 d14:	ef 90       	pop	r14
 d16:	df 90       	pop	r13
 d18:	cf 90       	pop	r12
 d1a:	08 95       	ret

00000d1c <__fixunssfsi>:
 d1c:	70 d0       	rcall	.+224    	; 0xdfe <__fp_splitA>
 d1e:	88 f0       	brcs	.+34     	; 0xd42 <__fixunssfsi+0x26>
 d20:	9f 57       	subi	r25, 0x7F	; 127
 d22:	90 f0       	brcs	.+36     	; 0xd48 <__fixunssfsi+0x2c>
 d24:	b9 2f       	mov	r27, r25
 d26:	99 27       	eor	r25, r25
 d28:	b7 51       	subi	r27, 0x17	; 23
 d2a:	a0 f0       	brcs	.+40     	; 0xd54 <__fixunssfsi+0x38>
 d2c:	d1 f0       	breq	.+52     	; 0xd62 <__fixunssfsi+0x46>
 d2e:	66 0f       	add	r22, r22
 d30:	77 1f       	adc	r23, r23
 d32:	88 1f       	adc	r24, r24
 d34:	99 1f       	adc	r25, r25
 d36:	1a f0       	brmi	.+6      	; 0xd3e <__fixunssfsi+0x22>
 d38:	ba 95       	dec	r27
 d3a:	c9 f7       	brne	.-14     	; 0xd2e <__fixunssfsi+0x12>
 d3c:	12 c0       	rjmp	.+36     	; 0xd62 <__fixunssfsi+0x46>
 d3e:	b1 30       	cpi	r27, 0x01	; 1
 d40:	81 f0       	breq	.+32     	; 0xd62 <__fixunssfsi+0x46>
 d42:	77 d0       	rcall	.+238    	; 0xe32 <__fp_zero>
 d44:	b1 e0       	ldi	r27, 0x01	; 1
 d46:	08 95       	ret
 d48:	74 c0       	rjmp	.+232    	; 0xe32 <__fp_zero>
 d4a:	67 2f       	mov	r22, r23
 d4c:	78 2f       	mov	r23, r24
 d4e:	88 27       	eor	r24, r24
 d50:	b8 5f       	subi	r27, 0xF8	; 248
 d52:	39 f0       	breq	.+14     	; 0xd62 <__fixunssfsi+0x46>
 d54:	b9 3f       	cpi	r27, 0xF9	; 249
 d56:	cc f3       	brlt	.-14     	; 0xd4a <__fixunssfsi+0x2e>
 d58:	86 95       	lsr	r24
 d5a:	77 95       	ror	r23
 d5c:	67 95       	ror	r22
 d5e:	b3 95       	inc	r27
 d60:	d9 f7       	brne	.-10     	; 0xd58 <__fixunssfsi+0x3c>
 d62:	3e f4       	brtc	.+14     	; 0xd72 <__fixunssfsi+0x56>
 d64:	90 95       	com	r25
 d66:	80 95       	com	r24
 d68:	70 95       	com	r23
 d6a:	61 95       	neg	r22
 d6c:	7f 4f       	sbci	r23, 0xFF	; 255
 d6e:	8f 4f       	sbci	r24, 0xFF	; 255
 d70:	9f 4f       	sbci	r25, 0xFF	; 255
 d72:	08 95       	ret

00000d74 <__floatunsisf>:
 d74:	e8 94       	clt
 d76:	09 c0       	rjmp	.+18     	; 0xd8a <__floatsisf+0x12>

00000d78 <__floatsisf>:
 d78:	97 fb       	bst	r25, 7
 d7a:	3e f4       	brtc	.+14     	; 0xd8a <__floatsisf+0x12>
 d7c:	90 95       	com	r25
 d7e:	80 95       	com	r24
 d80:	70 95       	com	r23
 d82:	61 95       	neg	r22
 d84:	7f 4f       	sbci	r23, 0xFF	; 255
 d86:	8f 4f       	sbci	r24, 0xFF	; 255
 d88:	9f 4f       	sbci	r25, 0xFF	; 255
 d8a:	99 23       	and	r25, r25
 d8c:	a9 f0       	breq	.+42     	; 0xdb8 <__floatsisf+0x40>
 d8e:	f9 2f       	mov	r31, r25
 d90:	96 e9       	ldi	r25, 0x96	; 150
 d92:	bb 27       	eor	r27, r27
 d94:	93 95       	inc	r25
 d96:	f6 95       	lsr	r31
 d98:	87 95       	ror	r24
 d9a:	77 95       	ror	r23
 d9c:	67 95       	ror	r22
 d9e:	b7 95       	ror	r27
 da0:	f1 11       	cpse	r31, r1
 da2:	f8 cf       	rjmp	.-16     	; 0xd94 <__floatsisf+0x1c>
 da4:	fa f4       	brpl	.+62     	; 0xde4 <__floatsisf+0x6c>
 da6:	bb 0f       	add	r27, r27
 da8:	11 f4       	brne	.+4      	; 0xdae <__floatsisf+0x36>
 daa:	60 ff       	sbrs	r22, 0
 dac:	1b c0       	rjmp	.+54     	; 0xde4 <__floatsisf+0x6c>
 dae:	6f 5f       	subi	r22, 0xFF	; 255
 db0:	7f 4f       	sbci	r23, 0xFF	; 255
 db2:	8f 4f       	sbci	r24, 0xFF	; 255
 db4:	9f 4f       	sbci	r25, 0xFF	; 255
 db6:	16 c0       	rjmp	.+44     	; 0xde4 <__floatsisf+0x6c>
 db8:	88 23       	and	r24, r24
 dba:	11 f0       	breq	.+4      	; 0xdc0 <__floatsisf+0x48>
 dbc:	96 e9       	ldi	r25, 0x96	; 150
 dbe:	11 c0       	rjmp	.+34     	; 0xde2 <__floatsisf+0x6a>
 dc0:	77 23       	and	r23, r23
 dc2:	21 f0       	breq	.+8      	; 0xdcc <__floatsisf+0x54>
 dc4:	9e e8       	ldi	r25, 0x8E	; 142
 dc6:	87 2f       	mov	r24, r23
 dc8:	76 2f       	mov	r23, r22
 dca:	05 c0       	rjmp	.+10     	; 0xdd6 <__floatsisf+0x5e>
 dcc:	66 23       	and	r22, r22
 dce:	71 f0       	breq	.+28     	; 0xdec <__floatsisf+0x74>
 dd0:	96 e8       	ldi	r25, 0x86	; 134
 dd2:	86 2f       	mov	r24, r22
 dd4:	70 e0       	ldi	r23, 0x00	; 0
 dd6:	60 e0       	ldi	r22, 0x00	; 0
 dd8:	2a f0       	brmi	.+10     	; 0xde4 <__floatsisf+0x6c>
 dda:	9a 95       	dec	r25
 ddc:	66 0f       	add	r22, r22
 dde:	77 1f       	adc	r23, r23
 de0:	88 1f       	adc	r24, r24
 de2:	da f7       	brpl	.-10     	; 0xdda <__floatsisf+0x62>
 de4:	88 0f       	add	r24, r24
 de6:	96 95       	lsr	r25
 de8:	87 95       	ror	r24
 dea:	97 f9       	bld	r25, 7
 dec:	08 95       	ret

00000dee <__fp_split3>:
 dee:	57 fd       	sbrc	r21, 7
 df0:	90 58       	subi	r25, 0x80	; 128
 df2:	44 0f       	add	r20, r20
 df4:	55 1f       	adc	r21, r21
 df6:	59 f0       	breq	.+22     	; 0xe0e <__fp_splitA+0x10>
 df8:	5f 3f       	cpi	r21, 0xFF	; 255
 dfa:	71 f0       	breq	.+28     	; 0xe18 <__fp_splitA+0x1a>
 dfc:	47 95       	ror	r20

00000dfe <__fp_splitA>:
 dfe:	88 0f       	add	r24, r24
 e00:	97 fb       	bst	r25, 7
 e02:	99 1f       	adc	r25, r25
 e04:	61 f0       	breq	.+24     	; 0xe1e <__fp_splitA+0x20>
 e06:	9f 3f       	cpi	r25, 0xFF	; 255
 e08:	79 f0       	breq	.+30     	; 0xe28 <__fp_splitA+0x2a>
 e0a:	87 95       	ror	r24
 e0c:	08 95       	ret
 e0e:	12 16       	cp	r1, r18
 e10:	13 06       	cpc	r1, r19
 e12:	14 06       	cpc	r1, r20
 e14:	55 1f       	adc	r21, r21
 e16:	f2 cf       	rjmp	.-28     	; 0xdfc <__fp_split3+0xe>
 e18:	46 95       	lsr	r20
 e1a:	f1 df       	rcall	.-30     	; 0xdfe <__fp_splitA>
 e1c:	08 c0       	rjmp	.+16     	; 0xe2e <__fp_splitA+0x30>
 e1e:	16 16       	cp	r1, r22
 e20:	17 06       	cpc	r1, r23
 e22:	18 06       	cpc	r1, r24
 e24:	99 1f       	adc	r25, r25
 e26:	f1 cf       	rjmp	.-30     	; 0xe0a <__fp_splitA+0xc>
 e28:	86 95       	lsr	r24
 e2a:	71 05       	cpc	r23, r1
 e2c:	61 05       	cpc	r22, r1
 e2e:	08 94       	sec
 e30:	08 95       	ret

00000e32 <__fp_zero>:
 e32:	e8 94       	clt

00000e34 <__fp_szero>:
 e34:	bb 27       	eor	r27, r27
 e36:	66 27       	eor	r22, r22
 e38:	77 27       	eor	r23, r23
 e3a:	cb 01       	movw	r24, r22
 e3c:	97 f9       	bld	r25, 7
 e3e:	08 95       	ret

00000e40 <__mulsf3>:
 e40:	0b d0       	rcall	.+22     	; 0xe58 <__mulsf3x>
 e42:	78 c0       	rjmp	.+240    	; 0xf34 <__fp_round>
 e44:	69 d0       	rcall	.+210    	; 0xf18 <__fp_pscA>
 e46:	28 f0       	brcs	.+10     	; 0xe52 <__mulsf3+0x12>
 e48:	6e d0       	rcall	.+220    	; 0xf26 <__fp_pscB>
 e4a:	18 f0       	brcs	.+6      	; 0xe52 <__mulsf3+0x12>
 e4c:	95 23       	and	r25, r21
 e4e:	09 f0       	breq	.+2      	; 0xe52 <__mulsf3+0x12>
 e50:	5a c0       	rjmp	.+180    	; 0xf06 <__fp_inf>
 e52:	5f c0       	rjmp	.+190    	; 0xf12 <__fp_nan>
 e54:	11 24       	eor	r1, r1
 e56:	ee cf       	rjmp	.-36     	; 0xe34 <__fp_szero>

00000e58 <__mulsf3x>:
 e58:	ca df       	rcall	.-108    	; 0xdee <__fp_split3>
 e5a:	a0 f3       	brcs	.-24     	; 0xe44 <__mulsf3+0x4>

00000e5c <__mulsf3_pse>:
 e5c:	95 9f       	mul	r25, r21
 e5e:	d1 f3       	breq	.-12     	; 0xe54 <__mulsf3+0x14>
 e60:	95 0f       	add	r25, r21
 e62:	50 e0       	ldi	r21, 0x00	; 0
 e64:	55 1f       	adc	r21, r21
 e66:	62 9f       	mul	r22, r18
 e68:	f0 01       	movw	r30, r0
 e6a:	72 9f       	mul	r23, r18
 e6c:	bb 27       	eor	r27, r27
 e6e:	f0 0d       	add	r31, r0
 e70:	b1 1d       	adc	r27, r1
 e72:	63 9f       	mul	r22, r19
 e74:	aa 27       	eor	r26, r26
 e76:	f0 0d       	add	r31, r0
 e78:	b1 1d       	adc	r27, r1
 e7a:	aa 1f       	adc	r26, r26
 e7c:	64 9f       	mul	r22, r20
 e7e:	66 27       	eor	r22, r22
 e80:	b0 0d       	add	r27, r0
 e82:	a1 1d       	adc	r26, r1
 e84:	66 1f       	adc	r22, r22
 e86:	82 9f       	mul	r24, r18
 e88:	22 27       	eor	r18, r18
 e8a:	b0 0d       	add	r27, r0
 e8c:	a1 1d       	adc	r26, r1
 e8e:	62 1f       	adc	r22, r18
 e90:	73 9f       	mul	r23, r19
 e92:	b0 0d       	add	r27, r0
 e94:	a1 1d       	adc	r26, r1
 e96:	62 1f       	adc	r22, r18
 e98:	83 9f       	mul	r24, r19
 e9a:	a0 0d       	add	r26, r0
 e9c:	61 1d       	adc	r22, r1
 e9e:	22 1f       	adc	r18, r18
 ea0:	74 9f       	mul	r23, r20
 ea2:	33 27       	eor	r19, r19
 ea4:	a0 0d       	add	r26, r0
 ea6:	61 1d       	adc	r22, r1
 ea8:	23 1f       	adc	r18, r19
 eaa:	84 9f       	mul	r24, r20
 eac:	60 0d       	add	r22, r0
 eae:	21 1d       	adc	r18, r1
 eb0:	82 2f       	mov	r24, r18
 eb2:	76 2f       	mov	r23, r22
 eb4:	6a 2f       	mov	r22, r26
 eb6:	11 24       	eor	r1, r1
 eb8:	9f 57       	subi	r25, 0x7F	; 127
 eba:	50 40       	sbci	r21, 0x00	; 0
 ebc:	8a f0       	brmi	.+34     	; 0xee0 <__mulsf3_pse+0x84>
 ebe:	e1 f0       	breq	.+56     	; 0xef8 <__mulsf3_pse+0x9c>
 ec0:	88 23       	and	r24, r24
 ec2:	4a f0       	brmi	.+18     	; 0xed6 <__mulsf3_pse+0x7a>
 ec4:	ee 0f       	add	r30, r30
 ec6:	ff 1f       	adc	r31, r31
 ec8:	bb 1f       	adc	r27, r27
 eca:	66 1f       	adc	r22, r22
 ecc:	77 1f       	adc	r23, r23
 ece:	88 1f       	adc	r24, r24
 ed0:	91 50       	subi	r25, 0x01	; 1
 ed2:	50 40       	sbci	r21, 0x00	; 0
 ed4:	a9 f7       	brne	.-22     	; 0xec0 <__mulsf3_pse+0x64>
 ed6:	9e 3f       	cpi	r25, 0xFE	; 254
 ed8:	51 05       	cpc	r21, r1
 eda:	70 f0       	brcs	.+28     	; 0xef8 <__mulsf3_pse+0x9c>
 edc:	14 c0       	rjmp	.+40     	; 0xf06 <__fp_inf>
 ede:	aa cf       	rjmp	.-172    	; 0xe34 <__fp_szero>
 ee0:	5f 3f       	cpi	r21, 0xFF	; 255
 ee2:	ec f3       	brlt	.-6      	; 0xede <__mulsf3_pse+0x82>
 ee4:	98 3e       	cpi	r25, 0xE8	; 232
 ee6:	dc f3       	brlt	.-10     	; 0xede <__mulsf3_pse+0x82>
 ee8:	86 95       	lsr	r24
 eea:	77 95       	ror	r23
 eec:	67 95       	ror	r22
 eee:	b7 95       	ror	r27
 ef0:	f7 95       	ror	r31
 ef2:	e7 95       	ror	r30
 ef4:	9f 5f       	subi	r25, 0xFF	; 255
 ef6:	c1 f7       	brne	.-16     	; 0xee8 <__mulsf3_pse+0x8c>
 ef8:	fe 2b       	or	r31, r30
 efa:	88 0f       	add	r24, r24
 efc:	91 1d       	adc	r25, r1
 efe:	96 95       	lsr	r25
 f00:	87 95       	ror	r24
 f02:	97 f9       	bld	r25, 7
 f04:	08 95       	ret

00000f06 <__fp_inf>:
 f06:	97 f9       	bld	r25, 7
 f08:	9f 67       	ori	r25, 0x7F	; 127
 f0a:	80 e8       	ldi	r24, 0x80	; 128
 f0c:	70 e0       	ldi	r23, 0x00	; 0
 f0e:	60 e0       	ldi	r22, 0x00	; 0
 f10:	08 95       	ret

00000f12 <__fp_nan>:
 f12:	9f ef       	ldi	r25, 0xFF	; 255
 f14:	80 ec       	ldi	r24, 0xC0	; 192
 f16:	08 95       	ret

00000f18 <__fp_pscA>:
 f18:	00 24       	eor	r0, r0
 f1a:	0a 94       	dec	r0
 f1c:	16 16       	cp	r1, r22
 f1e:	17 06       	cpc	r1, r23
 f20:	18 06       	cpc	r1, r24
 f22:	09 06       	cpc	r0, r25
 f24:	08 95       	ret

00000f26 <__fp_pscB>:
 f26:	00 24       	eor	r0, r0
 f28:	0a 94       	dec	r0
 f2a:	12 16       	cp	r1, r18
 f2c:	13 06       	cpc	r1, r19
 f2e:	14 06       	cpc	r1, r20
 f30:	05 06       	cpc	r0, r21
 f32:	08 95       	ret

00000f34 <__fp_round>:
 f34:	09 2e       	mov	r0, r25
 f36:	03 94       	inc	r0
 f38:	00 0c       	add	r0, r0
 f3a:	11 f4       	brne	.+4      	; 0xf40 <__fp_round+0xc>
 f3c:	88 23       	and	r24, r24
 f3e:	52 f0       	brmi	.+20     	; 0xf54 <__fp_round+0x20>
 f40:	bb 0f       	add	r27, r27
 f42:	40 f4       	brcc	.+16     	; 0xf54 <__fp_round+0x20>
 f44:	bf 2b       	or	r27, r31
 f46:	11 f4       	brne	.+4      	; 0xf4c <__fp_round+0x18>
 f48:	60 ff       	sbrs	r22, 0
 f4a:	04 c0       	rjmp	.+8      	; 0xf54 <__fp_round+0x20>
 f4c:	6f 5f       	subi	r22, 0xFF	; 255
 f4e:	7f 4f       	sbci	r23, 0xFF	; 255
 f50:	8f 4f       	sbci	r24, 0xFF	; 255
 f52:	9f 4f       	sbci	r25, 0xFF	; 255
 f54:	08 95       	ret

00000f56 <__udivmodhi4>:
 f56:	aa 1b       	sub	r26, r26
 f58:	bb 1b       	sub	r27, r27
 f5a:	51 e1       	ldi	r21, 0x11	; 17
 f5c:	07 c0       	rjmp	.+14     	; 0xf6c <__udivmodhi4_ep>

00000f5e <__udivmodhi4_loop>:
 f5e:	aa 1f       	adc	r26, r26
 f60:	bb 1f       	adc	r27, r27
 f62:	a6 17       	cp	r26, r22
 f64:	b7 07       	cpc	r27, r23
 f66:	10 f0       	brcs	.+4      	; 0xf6c <__udivmodhi4_ep>
 f68:	a6 1b       	sub	r26, r22
 f6a:	b7 0b       	sbc	r27, r23

00000f6c <__udivmodhi4_ep>:
 f6c:	88 1f       	adc	r24, r24
 f6e:	99 1f       	adc	r25, r25
 f70:	5a 95       	dec	r21
 f72:	a9 f7       	brne	.-22     	; 0xf5e <__udivmodhi4_loop>
 f74:	80 95       	com	r24
 f76:	90 95       	com	r25
 f78:	bc 01       	movw	r22, r24
 f7a:	cd 01       	movw	r24, r26
 f7c:	08 95       	ret

00000f7e <_exit>:
 f7e:	f8 94       	cli

00000f80 <__stop_program>:
 f80:	ff cf       	rjmp	.-2      	; 0xf80 <__stop_program>
